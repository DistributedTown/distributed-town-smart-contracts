{"metadata":"{\"compiler\":{\"version\":\"0.8.0\"},\"sources\":{\"contracts/CommunitiesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Community.sol\\\";\\r\\nimport \\\"./Membership.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DistributedTown CommunitiesRegistry\\r\\n *\\r\\n * @dev Implementation of the CommunitiesRegistry contract, which is a Factory and Registry of Communities\\r\\n * @author DistributedTown\\r\\n */\\r\\ncontract CommunitiesRegistry {\\r\\n    event CommunityCreated(address _newCommunityAddress);\\r\\n\\r\\n    mapping(address => bool) public isCommunity;\\r\\n    address[] public communityAddresses;\\r\\n    uint256 public numOfCommunities;\\r\\n    address public skillWalletAddress;\\r\\n\\r\\n    constructor(address _skillWalletAddress) public {\\r\\n        skillWalletAddress = _skillWalletAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a community\\r\\n     * @return _communityAddress the newly created Community address\\r\\n     **/\\r\\n    function createCommunity(\\r\\n        string memory _url,\\r\\n        uint256 _ownerId,\\r\\n        uint256 _ownerCredits,\\r\\n        string memory _name,\\r\\n        Types.Template _template,\\r\\n        uint8 _positionalValue1,\\r\\n        uint8 _positionalValue2,\\r\\n        uint8 _positionalValue3\\r\\n    ) external returns (address _communityAddress) {\\r\\n        Community community =\\r\\n            new Community(\\r\\n                _url,\\r\\n                _ownerId,\\r\\n                _ownerCredits,\\r\\n                _name,\\r\\n                _template,\\r\\n                _positionalValue1,\\r\\n                _positionalValue2,\\r\\n                _positionalValue3,\\r\\n                skillWalletAddress,\\r\\n                address(this)\\r\\n            );\\r\\n        address newCommunityAddress = address(community);\\r\\n\\r\\n        isCommunity[newCommunityAddress] = true;\\r\\n        communityAddresses.push(newCommunityAddress);\\r\\n        numOfCommunities = numOfCommunities + 1;\\r\\n\\r\\n        emit CommunityCreated(newCommunityAddress);\\r\\n\\r\\n        return newCommunityAddress;\\r\\n    }\\r\\n\\r\\n    function joinNewMember(\\r\\n        address community,\\r\\n        Types.SkillSet calldata skillSet,\\r\\n        string calldata uri,\\r\\n        uint256 credits\\r\\n    ) external {\\r\\n        require(isCommunity[community], \\\"Invalid community address!\\\");\\r\\n\\r\\n        Community communityContr = Community(community);\\r\\n        communityContr.joinNewMember(msg.sender, skillSet, uri, credits);\\r\\n    }\\r\\n\\r\\n    function joinExistingSW(\\r\\n        address community,\\r\\n        uint256 skillWalletTokenId,\\r\\n        uint256 credits\\r\\n    ) external {\\r\\n        require(isCommunity[community], \\\"Invalid community address!\\\");\\r\\n\\r\\n        Community communityContr = Community(community);\\r\\n        communityContr.join(skillWalletTokenId, credits);\\r\\n    }\\r\\n\\r\\n    function getCommunities() public view returns(address[] memory) {\\r\\n        return communityAddresses;\\r\\n    }\\r\\n}\\r\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"contracts/Community.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\n\\r\\nimport \\\"./Membership.sol\\\";\\r\\nimport \\\"./CommunitiesRegistry.sol\\\";\\r\\nimport \\\"./CommonTypes.sol\\\";\\r\\nimport \\\"./ISkillWallet.sol\\\";\\r\\nimport \\\"./ERC1155.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DistributedTown Community\\r\\n *\\r\\n * @dev Implementation of the Community concept in the scope of the DistributedTown project\\r\\n * @author DistributedTown\\r\\n */\\r\\n\\r\\ncontract Community is ERC1155, ERC1155Holder {\\r\\n\\r\\n    enum TokenType {DiToCredit, Community}\\r\\n\\r\\n    Membership membership;\\r\\n    ISkillWallet skillWallet;\\r\\n\\r\\n    CommunitiesRegistry registry;\\r\\n\\r\\n    string public name;\\r\\n    uint256 public ownerId;\\r\\n    uint16 public activeMembersCount;\\r\\n    uint256 public scarcityScore;\\r\\n    mapping(uint256 => bool) public isMember;\\r\\n    uint256[] public skillWalletIds;\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when a member is added\\r\\n     * @param _member the user which just joined the community\\r\\n     * @param _transferredTokens the amount of transferred dito tokens on join\\r\\n     **/\\r\\n    event MemberAdded(\\r\\n        address _member,\\r\\n        uint256 _skillWalletTokenId,\\r\\n        uint256 _transferredTokens\\r\\n    );\\r\\n    event MemberLeft(address _member);\\r\\n\\r\\n    // add JSON Schema base URL\\r\\n    constructor(\\r\\n        string memory _url,\\r\\n        uint256 _ownerId,\\r\\n        uint256 _ownerCredits,\\r\\n        string memory _name,\\r\\n        Types.Template _template,\\r\\n        uint8 _positionalValue1,\\r\\n        uint8 _positionalValue2,\\r\\n        uint8 _positionalValue3,\\r\\n        address skillWalletAddress,\\r\\n        address communityRegistryAddress\\r\\n    ) public ERC1155(_url, communityRegistryAddress) {\\r\\n        skillWallet = ISkillWallet(skillWalletAddress);\\r\\n        registry = CommunitiesRegistry(communityRegistryAddress);\\r\\n        membership = new Membership(\\r\\n            _template,\\r\\n            _positionalValue1,\\r\\n            _positionalValue2,\\r\\n            _positionalValue3\\r\\n        );\\r\\n        name = _name;\\r\\n        if (registry.numOfCommunities() == 0) {\\r\\n            mintTokens();\\r\\n        } else {\\r\\n            mintTokens();\\r\\n            ownerId = _ownerId;\\r\\n            join(_ownerId, _ownerCredits);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintTokens() internal {\\r\\n        // Fungible DiToCredits ERC-20 token\\r\\n        _mint(address(this), uint256(TokenType.DiToCredit), 96000 * 1e4, \\\"\\\");\\r\\n        // Non-Fungible Community template NFT token\\r\\n        _mint(address(this), uint256(TokenType.Community), 1, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    // check if it's called only from deployer.\\r\\n    function joinNewMember(\\r\\n        address newMemberAddress,\\r\\n        Types.SkillSet calldata skillSet,\\r\\n        string calldata uri,\\r\\n        uint256 credits\\r\\n    ) public {\\r\\n        require(\\r\\n            activeMembersCount <= 24,\\r\\n            \\\"There are already 24 members, sorry!\\\"\\r\\n        );\\r\\n\\r\\n        skillWallet.create(newMemberAddress, skillSet, uri);\\r\\n\\r\\n        uint256 tokenId = skillWallet.getSkillWalletIdByOwner(newMemberAddress);\\r\\n\\r\\n        isMember[tokenId] = true;\\r\\n        skillWalletIds.push(tokenId);\\r\\n        activeMembersCount++;\\r\\n\\r\\n        // get the skills from chainlink\\r\\n        transferToMember(newMemberAddress, credits);\\r\\n        emit MemberAdded(newMemberAddress, tokenId, credits);\\r\\n    }\\r\\n\\r\\n    function join(uint256 skillWalletTokenId, uint256 credits) public {\\r\\n        require(\\r\\n            activeMembersCount <= 24,\\r\\n            \\\"There are already 24 members, sorry!\\\"\\r\\n        );\\r\\n        require(\\r\\n            !isMember[skillWalletTokenId],\\r\\n            \\\"You have already joined!\\\"\\r\\n        );\\r\\n\\r\\n        address skillWalletAddress = skillWallet.ownerOf(skillWalletTokenId);\\r\\n\\r\\n        // require(\\r\\n        //     msg.sender == skillWalletAddress,\\r\\n        //     \\\"Only the skill wallet owner can call this function\\\"\\r\\n        // );\\r\\n\\r\\n        isMember[skillWalletTokenId] = true;\\r\\n        skillWalletIds.push(skillWalletTokenId);\\r\\n        activeMembersCount++;\\r\\n\\r\\n        transferToMember(skillWalletAddress, credits);\\r\\n        emit MemberAdded(skillWalletAddress, skillWalletTokenId, credits);\\r\\n    }\\r\\n\\r\\n    function leave(address memberAddress) public {\\r\\n        emit MemberLeft(memberAddress);\\r\\n    }\\r\\n\\r\\n    function getSkillWalletIds() public view returns(uint256[] memory skillWalletIds){\\r\\n        return skillWalletIds;\\r\\n    }\\r\\n\\r\\n    function transferToMember(address _to, uint256 _value) public {\\r\\n        super.safeTransferFrom(address(this), _to, 0, _value, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function transferToCommunity(address _from, uint256 _value) public {\\r\\n        super.safeTransferFrom(_from, address(this), 0, _value, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) public override {\\r\\n        require(\\r\\n            _id == uint256(TokenType.DiToCredit),\\r\\n            \\\"Community NFT can't be trasfered\\\"\\r\\n        );\\r\\n\\r\\n        super.safeTransferFrom(_from, _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) public override {\\r\\n        require(\\r\\n            !contains(_ids, uint256(TokenType.Community)),\\r\\n            \\\"Community NFT can't be trasfered\\\"\\r\\n        );\\r\\n\\r\\n        super.safeBatchTransferFrom(_from, _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            _id == uint256(TokenType.DiToCredit),\\r\\n            \\\"Community NFT doesn't have a balance.\\\"\\r\\n        );\\r\\n        super.balanceOf(_owner, _id);\\r\\n    }\\r\\n\\r\\n    function diToCreditsBalance(address _owner) public view returns (uint256) {\\r\\n        super.balanceOf(_owner, uint256(TokenType.DiToCredit));\\r\\n    }\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(\\r\\n            !contains(_ids, uint256(TokenType.Community)),\\r\\n            \\\"Community NFT can't be trasfered\\\"\\r\\n        );\\r\\n\\r\\n        super.balanceOfBatch(_owners, _ids);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved)\\r\\n        public\\r\\n        override\\r\\n    {\\r\\n        super.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        super.isApprovedForAll(_owner, _operator);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, ERC1155Receiver) returns (bool) {\\r\\n        return interfaceId == type(IERC1155).interfaceId\\r\\n        || interfaceId == type(IERC1155MetadataURI).interfaceId\\r\\n        || interfaceId == type(IERC1155Receiver).interfaceId\\r\\n        || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function getMembership() public view returns (Membership) {\\r\\n        return membership;\\r\\n    }\\r\\n\\r\\n    function getTemplate() public view returns (Types.Template) {\\r\\n        return membership.template();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function getPositionalValues() public view returns (uint16[3] memory) {\\r\\n        uint16 p1 = membership.positionalValues(1);\\r\\n        uint16 p2 = membership.positionalValues(2);\\r\\n        uint16 p3 = membership.positionalValues(3);\\r\\n        return [p1, p2, p3];\\r\\n    }\\r\\n\\r\\n\\r\\n    function contains(uint256[] memory arr, uint256 element)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < arr.length; i++) {\\r\\n            if (arr[i] == element) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\"},\"contracts/CommonTypes.sol\":{\"content\":\"\\nlibrary Types {\\n    struct SkillSet {\\n        Skill skill1;\\n        Skill skill2;\\n        Skill skill3;\\n    }\\n    struct Skill {\\n        uint64 displayStringId;\\n        uint8 level;\\n    }\\n    enum Template {\\n        OpenSource, \\n        Art, \\n        Local,\\n        Other\\n    }\\n}\"},\"contracts/Membership.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Community.sol\\\";\\nimport \\\"./CommonTypes.sol\\\";\\n\\n\\n\\n/**\\n * @title DistributedTown Membership contract\\n *\\n * @dev Implementation of the Membership contract in the scope of the DistributedTown project\\n * @author DistributedTown\\n */\\n\\ncontract Membership {\\n\\n    address public communityAddress;\\n    Community community;\\n    Types.Template public template;\\n    mapping(uint16 => uint16) public positionalValues;\\n\\n    constructor(Types.Template _template, uint8 positionalValue1, uint8 positionalValue2, uint8 positionalValue3) public {\\n        communityAddress = msg.sender;\\n        community = Community(msg.sender);\\n        template = _template;\\n        positionalValues[1] = positionalValue1;\\n        positionalValues[2] = positionalValue2;\\n        positionalValues[3] = positionalValue3;\\n    }\\n\\n}\\n\"},\"contracts/ISkillWallet.sol\":{\"content\":\"\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./CommonTypes.sol\\\";\\n\\ninterface ISkillWallet is IERC721 {\\n\\n    event SkillWalletCreated(address indexed skillWalletOwner, address indexed community, uint256 indexed skillWalletId, Types.SkillSet skillSet);\\n\\n    event SkillWalletActivated(uint256 indexed skillWalletId);\\n\\n    event SkillSetUpdated(uint256 indexed skillWalletId, Types.SkillSet newSkillSet);\\n\\n    event SkillWalletCommunityChanged(uint256 indexed skillWalletId, address newCommunity);\\n\\n    function create(address skillWalletOwner, Types.SkillSet memory skillSet, string memory url) external;\\n\\n    function updateSkillSet(uint256 skillWalletId, Types.SkillSet memory newSkillSet) external;\\n\\n    function activateSkillWallet(uint256 skillWalletId) external;\\n\\n    function changeCommunity(uint256 skillWalletId) external;\\n\\n    function isSkillWalletRegistered(address skillWalletOwner) external view returns (bool status);\\n\\n    function getCommunityHistory(uint256 skillWalletId) external view returns (address[] memory communities);\\n\\n    function getActiveCommunity(uint256 skillWalletId) external view returns (address community);\\n\\n    function getTotalSkillWalletsRegistered() external view returns (uint256);\\n\\n    function getSkillWalletIdByOwner(address skillWalletOwner) external view returns (uint256);\\n\\n    function getSkillSet(uint256 skillWalletId) external view returns (Types.SkillSet memory skillSet);\\n\\n    function isSkillWalletActivated(uint256 skillWalletId) external view returns (bool status);\\n\\n\\n}\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    // The community registry address\\n    address private _communityRegistry;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_, address communityRegistry_) {\\n        _setURI(uri_);\\n        _communityRegistry = communityRegistry_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155).interfaceId\\n        || interfaceId == type(IERC1155MetadataURI).interfaceId\\n        || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n    public\\n    virtual\\n    override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || _communityRegistry == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n    public\\n    virtual\\n    override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || _communityRegistry == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n    internal\\n    virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n    private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n    private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\"}}}","address":"0x5FbDB2315678afecb367f032d93F642f64180aa3","bytecode":"0x608060405234801561001057600080fd5b5060405161461838038061461883398101604081905261002f91610054565b600380546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b614587806100916000396000f3fe60806040523480156200001157600080fd5b5060043610620000945760003560e01c8063a894d2aa1162000063578063a894d2aa146200011e578063b8ca27081462000128578063be8667691462000141578063c251b56514620001585762000094565b806348b2b32114620000995780637712f55114620000b25780639125268314620000c9578063993fa20b14620000f8575b600080fd5b620000b0620000aa36600462000641565b62000171565b005b620000b0620000c33660046200059b565b62000221565b620000e0620000da36600462000740565b620002d0565b604051620000ef9190620007f2565b60405180910390f35b6200010f6200010936600462000577565b620002fb565b604051620000ef9190620008d4565b620000e062000310565b620001326200031f565b604051620000ef9190620009cc565b620000e06200015236600462000676565b62000325565b620001626200044d565b604051620000ef919062000885565b6001600160a01b03831660009081526020819052604090205460ff16620001b55760405162461bcd60e51b8152600401620001ac9062000995565b60405180910390fd5b604051633cf335a360e11b815283906001600160a01b038216906379e66b4690620001e79086908690600401620009d5565b600060405180830381600087803b1580156200020257600080fd5b505af115801562000217573d6000803e3d6000fd5b5050505050505050565b6001600160a01b03851660009081526020819052604090205460ff166200025c5760405162461bcd60e51b8152600401620001ac9062000995565b604051637712f55160e01b815285906001600160a01b03821690637712f5519062000294903390899089908990899060040162000806565b600060405180830381600087803b158015620002af57600080fd5b505af1158015620002c4573d6000803e3d6000fd5b50505050505050505050565b60018181548110620002e157600080fd5b6000918252602090912001546001600160a01b0316905081565b60006020819052908152604090205460ff1681565b6003546001600160a01b031681565b60025481565b6000808989898989898989600360009054906101000a90046001600160a01b0316306040516200035590620004b1565b6200036a9a99989796959493929190620008df565b604051809103906000f08015801562000387573d6000803e3d6000fd5b506001600160a01b0381166000818152602081905260408120805460ff1916600190811790915580548082018255918190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180546001600160a01b03191690921790915560025491925082916200040291620009e3565b6002556040517fb4108a188495a1a681cdc0750af164011025a1773b41e93ff3e628adc037dc299062000437908390620007f2565b60405180910390a19a9950505050505050505050565b60606001805480602002602001604051908101604052809291908181526020018280548015620004a757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000488575b5050505050905090565b613b338062000a1f83390190565b80356001600160a01b0381168114620004d757600080fd5b919050565b600082601f830112620004ed578081fd5b813567ffffffffffffffff808211156200050b576200050b62000a08565b604051601f8301601f19168101602001828111828210171562000532576200053262000a08565b6040528281528483016020018610156200054a578384fd5b82602086016020830137918201602001929092529392505050565b803560ff81168114620004d757600080fd5b60006020828403121562000589578081fd5b6200059482620004bf565b9392505050565b6000806000806000858703610120811215620005b5578182fd5b620005c087620004bf565b955060c0601f1982011215620005d4578182fd5b5060208601935060e086013567ffffffffffffffff80821115620005f6578283fd5b818801915088601f8301126200060a578283fd5b81358181111562000619578384fd5b8960208285010111156200062b578384fd5b9699959850506020019561010001359392505050565b60008060006060848603121562000656578283fd5b6200066184620004bf565b95602085013595506040909401359392505050565b600080600080600080600080610100898b03121562000693578283fd5b883567ffffffffffffffff80821115620006ab578485fd5b620006b98c838d01620004dc565b995060208b0135985060408b0135975060608b0135915080821115620006dd578485fd5b50620006ec8b828c01620004dc565b95505060808901356004811062000701578384fd5b93506200071160a08a0162000565565b92506200072160c08a0162000565565b91506200073160e08a0162000565565b90509295985092959890939650565b60006020828403121562000752578081fd5b5035919050565b6001600160a01b03169052565b60008151808452815b818110156200078d576020818501810151868301820152016200076f565b818111156200079f5782602083870101525b50601f01601f19169290920160200192915050565b803567ffffffffffffffff8116808214620007ce57600080fd5b83525060ff620007e16020830162000565565b1660208301525050565b60ff169052565b6001600160a01b0391909116815260200190565b6001600160a01b03861681526000610120620008266020840188620007b4565b620008386060840160408901620007b4565b6200084a60a0840160808901620007b4565b8060e0840152848184015250610140848682850137828501810191909152610100820192909252601f909201601f1916909101019392505050565b6020808252825182820181905260009190848201906040850190845b81811015620008c85783516001600160a01b031683529284019291840191600101620008a1565b50909695505050505050565b901515815260200190565b6000610140808352620008f58184018e62000766565b90508b60208401528a6040840152828103606084015262000917818b62000766565b915050600488106200093957634e487b7160e01b600052602160045260246000fd5b87608083015260ff871660a08301526200095760c0830187620007eb565b6200096660e0830186620007eb565b6200097661010083018562000759565b6200098661012083018462000759565b9b9a5050505050505050505050565b6020808252601a908201527f496e76616c696420636f6d6d756e697479206164647265737321000000000000604082015260600190565b90815260200190565b918252602082015260400190565b6000821982111562000a0357634e487b7160e01b81526011600452602481fd5b500190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b5060405162003b3338038062003b33833981016040819052620000349162000a6a565b89816200004182620001c0565b600380546001600160a01b03199081166001600160a01b0393841617909155600580548216868416179055600680549091169184169190911790555060405186908690869086906200009390620008a5565b620000a2949392919062000c05565b604051809103906000f080158015620000bf573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b03929092169190911790558651620000f59060079060208a0190620008b3565b50600660009054906101000a90046001600160a01b03166001600160a01b031663b8ca27086040518163ffffffff1660e01b815260040160206040518083038186803b1580156200014557600080fd5b505afa1580156200015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000180919062000b56565b62000195576200018f620001d9565b620001b0565b6200019f620001d9565b6008899055620001b089896200021c565b505050505050505050506200105a565b8051620001d5906002906020840190620008b3565b5050565b620001fb306000604080516020810190915260008152633938700090620003df565b6200021a306001604080516020810190915260008152600190620003df565b565b600954601861ffff9091161115620002515760405162461bcd60e51b8152600401620002489062000ddb565b60405180910390fd5b6000828152600b602052604090205460ff1615620002835760405162461bcd60e51b8152600401620002489062000e1f565b6005546040516331a9108f60e11b81526000916001600160a01b031690636352211e90620002b690869060040162000e97565b60206040518083038186803b158015620002cf57600080fd5b505afa158015620002e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030a919062000a1c565b6000848152600b60205260408120805460ff19166001908117909155600c8054918201815582527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018590556009805492935061ffff9092169190620003708362000f53565b91906101000a81548161ffff021916908361ffff160217905550506200039d8183620004d560201b60201c565b7fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e818484604051620003d29392919062000be4565b60405180910390a1505050565b6001600160a01b038416620004085760405162461bcd60e51b8152600401620002489062000e56565b600062000414620004ff565b90506200043b81600087620004298862000504565b620004348862000504565b8762000560565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906200046d90849062000eae565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b031660008051602062003b138339815191528787604051620004b592919062000ea0565b60405180910390a4620004ce8160008787878762000568565b5050505050565b620001d53083600084604051806020016040528060008152506200069f60201b62000ea21760201c565b335b90565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106200054d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015290505b919050565b505050505050565b62000587846001600160a01b03166200085160201b620010581760201c565b15620005605760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190620005c3908990899088908890889060040162000b9d565b602060405180830381600087803b158015620005de57600080fd5b505af192505050801562000611575060408051601f3d908101601f191682019092526200060e9181019062000a40565b60015b62000663576200062062000faa565b806200062d575062000649565b8060405162461bcd60e51b815260040162000248919062000c49565b60405162461bcd60e51b8152600401620002489062000c5e565b6001600160e01b0319811663f23a6e6160e01b14620006965760405162461bcd60e51b8152600401620002489062000cbb565b50505050505050565b6001600160a01b038416620006c85760405162461bcd60e51b8152600401620002489062000d4c565b620006d2620004ff565b6001600160a01b0316856001600160a01b03161480620007095750620006f7620004ff565b6003546001600160a01b039081169116145b8062000725575062000725856200071f620004ff565b62000857565b620007445760405162461bcd60e51b8152600401620002489062000d03565b600062000750620004ff565b905062000764818787620004298862000504565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015620007a85760405162461bcd60e51b8152600401620002489062000d91565b620007b4848262000ec9565b6000868152602081815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290620007f290849062000eae565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b031660008051602062003b1383398151915288886040516200083992919062000ea0565b60405180910390a46200069682888888888862000568565b3b151590565b60006200087083836200087760201b6200105e1760201c565b5092915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61031a80620037f983390190565b828054620008c19062000f16565b90600052602060002090601f016020900481019282620008e5576000855562000930565b82601f106200090057805160ff191683800117855562000930565b8280016001018555821562000930579182015b828111156200093057825182559160200191906001019062000913565b506200093e92915062000942565b5090565b5b808211156200093e576000815560010162000943565b80516001600160a01b03811681146200055b57600080fd5b8051600481106200055b57600080fd5b600082601f83011262000992578081fd5b81516001600160401b0380821115620009af57620009af62000f8e565b604051601f8301601f191681016020018281118282101715620009d657620009d662000f8e565b604052828152848301602001861015620009ee578384fd5b62000a0183602083016020880162000ee3565b95945050505050565b805160ff811681146200055b57600080fd5b60006020828403121562000a2e578081fd5b62000a398262000959565b9392505050565b60006020828403121562000a52578081fd5b81516001600160e01b03198116811462000a39578182fd5b6000806000806000806000806000806101408b8d03121562000a8a578586fd5b8a516001600160401b038082111562000aa1578788fd5b62000aaf8e838f0162000981565b9b5060208d01519a5060408d0151995060608d015191508082111562000ad3578788fd5b5062000ae28d828e0162000981565b97505062000af360808c0162000971565b955062000b0360a08c0162000a0a565b945062000b1360c08c0162000a0a565b935062000b2360e08c0162000a0a565b925062000b346101008c0162000959565b915062000b456101208c0162000959565b90509295989b9194979a5092959850565b60006020828403121562000b68578081fd5b5051919050565b6000815180845262000b8981602086016020860162000ee3565b601f01601f19169290920160200192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009062000bd99083018462000b6f565b979650505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b608081016004861062000c2857634e487b7160e01b600052602160045260246000fd5b94815260ff9384166020820152918316604083015290911660609091015290565b60006020825262000a39602083018462000b6f565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560408201527f526563656976657220696d706c656d656e746572000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526024908201527f54686572652061726520616c7265616479203234206d656d626572732c20736f6040820152637272792160e01b606082015260800190565b60208082526018908201527f596f75206861766520616c7265616479206a6f696e6564210000000000000000604082015260600190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b90815260200190565b918252602082015260400190565b6000821982111562000ec45762000ec462000f78565b500190565b60008282101562000ede5762000ede62000f78565b500390565b60005b8381101562000f0057818101518382015260200162000ee6565b8381111562000f10576000848401525b50505050565b60028104600182168062000f2b57607f821691505b6020821081141562000f4d57634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff8083168181141562000f6e5762000f6e62000f78565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d101562000fbc5762000501565b600481823e6308c379a062000fd2825162000fa4565b1462000fde5762000501565b6040513d600319016004823e80513d6001600160401b0380831160248401831017156200100f575050505062000501565b828401925082519150808211156200102b575050505062000501565b503d83016020828401011115620010455750505062000501565b601f01601f1916810160200160405291505090565b61278f806200106a6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80637c8da89d116100de578063bedf77a611610097578063e28cf15911610071578063e28cf15914610367578063e985e9c51461036f578063f23a6e6114610382578063f242432a146103955761018d565b8063bedf77a61461032e578063cfeaeb8b14610341578063d50c7377146103545761018d565b80637c8da89d146102ab5780638f853115146102c0578063a22cb465146102d3578063abb88bcc146102e6578063b887b087146102fb578063bc197c811461030e5761018d565b80631a98ce751161014b5780634e1273f4116101255780634e1273f4146102505780635aa97b06146102705780637712f5511461028557806379e66b46146102985761018d565b80631a98ce75146102135780632eb2c2d614610226578063321c48f21461023b5761018d565b8062fdd58e14610192578063019c08f5146101bb57806301ffc9a7146101c357806306fdde03146101e35780630e89341c146101f8578063135b41651461020b575b600080fd5b6101a56101a0366004611d50565b6103a8565b6040516101b29190612574565b60405180910390f35b6101a56103e2565b6101d66101d1366004611de3565b6103e8565b6040516101b2919061212a565b6101eb610449565b6040516101b29190612181565b6101eb610206366004611e5c565b6104d7565b6101a561056b565b6101a56102213660046119f1565b610571565b610239610234366004611a68565b610583565b005b610243610691565b6040516101b2919061214a565b61026361025e366004611d7b565b61071f565b6040516101b291906120e9565b6102786107f3565b6040516101b291906120b4565b610239610293366004611cdb565b6109b3565b6102396102a6366004611e8c565b610b93565b6102b3610d35565b6040516101b29190612172565b6101a56102ce366004611e5c565b610d3f565b6102396102e1366004611caa565b610d60565b6102ee610d6e565b6040516101b29190611f6e565b610239610309366004611d50565b610d7d565b61032161031c366004611b22565b610d9a565b6040516101b29190612135565b61023961033c3660046119f1565b610dab565b61023961034f366004611d50565b610de5565b6101d6610362366004611e5c565b610e02565b610263610e17565b6101d661037d366004611a30565b610e1c565b610321610390366004611c44565b610e28565b6102396103a3366004611bcb565b610e39565b600081156103d15760405162461bcd60e51b81526004016103c8906122f9565b60405180910390fd5b6103db838361108c565b5092915050565b60085481565b60006001600160e01b03198216636cdb3d1360e11b148061041957506001600160e01b031982166303a24d0760e21b145b8061043457506001600160e01b03198216630271189760e51b145b806104435750610443826110da565b92915050565b60078054610456906125e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610482906125e3565b80156104cf5780601f106104a4576101008083540402835291602001916104cf565b820191906000526020600020905b8154815290600101906020018083116104b257829003601f168201915b505050505081565b6060600280546104e6906125e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610512906125e3565b801561055f5780601f106105345761010080835404028352916020019161055f565b820191906000526020600020905b81548152906001019060200180831161054257829003601f168201915b50505050509050919050565b600a5481565b600061057d828261108c565b50919050565b6105c7868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250600192506105c2915050565b6110ff565b156105e45760405162461bcd60e51b81526004016103c89061227b565b610687888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061116192505050565b5050505050505050565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316636f2ddd936040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e157600080fd5b505afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190611e1b565b90505b90565b6060610760838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250600192506105c2915050565b1561077d5760405162461bcd60e51b81526004016103c89061227b565b6107ea858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506113df92505050565b50949350505050565b6107fb611861565b60048054604051633a5b120360e11b81526000926001600160a01b03909216916374b624069161082e9160019101612172565b60206040518083038186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190611e3a565b60048054604051633a5b120360e11b81529293506000926001600160a01b03909116916374b62406916108b49160029101612172565b60206040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109049190611e3a565b60048054604051633a5b120360e11b81529293506000926001600160a01b03909116916374b624069161093a9160039101612172565b60206040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190611e3a565b6040805160608101825261ffff9586168152938516602085015293169282019290925291505090565b600954601861ffff90911611156109dc5760405162461bcd60e51b81526004016103c89061241f565b600554604051630a73b69d60e01b81526001600160a01b0390911690630a73b69d90610a12908890889088908890600401612025565b600060405180830381600087803b158015610a2c57600080fd5b505af1158015610a40573d6000803e3d6000fd5b50506005546040516342ca962960e01b8152600093506001600160a01b0390911691506342ca962990610a77908990600401611f6e565b60206040518083038186803b158015610a8f57600080fd5b505afa158015610aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac79190611e74565b6000818152600b60205260408120805460ff19166001908117909155600c8054918201815582527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018290556009805492935061ffff9092169190610b2b83612618565b91906101000a81548161ffff021916908361ffff16021790555050610b508683610d7d565b7fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e868284604051610b8393929190612093565b60405180910390a1505050505050565b600954601861ffff9091161115610bbc5760405162461bcd60e51b81526004016103c89061241f565b6000828152600b602052604090205460ff1615610beb5760405162461bcd60e51b81526004016103c890612463565b6005546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610c1c908690600401612574565b60206040518083038186803b158015610c3457600080fd5b505afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c9190611a14565b6000848152600b60205260408120805460ff19166001908117909155600c8054918201815582527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018590556009805492935061ffff9092169190610cd083612618565b91906101000a81548161ffff021916908361ffff16021790555050610cf58183610d7d565b7fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e818484604051610d2893929190612093565b60405180910390a1505050565b60095461ffff1681565b600c8181548110610d4f57600080fd5b600091825260209091200154905081565b610d6a82826114fe565b5050565b6004546001600160a01b031690565b610d6a308360008460405180602001604052806000815250610ea2565b63bc197c8160e01b95945050505050565b7fbea911b50ccdd2233b28faa49766c3cbd0631608f32e5a724d7b83b32b681ad081604051610dda9190611f6e565b60405180910390a150565b610d6a823060008460405180602001604052806000815250610ea2565b600b6020526000908152604090205460ff1681565b606090565b60006103db838361105e565b63f23a6e6160e01b95945050505050565b8315610e575760405162461bcd60e51b81526004016103c89061227b565b610e9a8686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ea292505050565b505050505050565b6001600160a01b038416610ec85760405162461bcd60e51b81526004016103c89061233e565b610ed06115cc565b6001600160a01b0316856001600160a01b03161480610f045750610ef26115cc565b6003546001600160a01b039081169116145b80610f165750610f168561037d6115cc565b610f325760405162461bcd60e51b81526004016103c8906122b0565b6000610f3c6115cc565b9050610f5c818787610f4d886115d0565b610f56886115d0565b87610e9a565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610f9d5760405162461bcd60e51b81526004016103c8906123d5565b610fa784826125cc565b6000868152602081815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290610fe39084906125b4565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161103992919061257d565b60405180910390a461104f828888888888611629565b50505050505050565b3b151590565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b60006001600160a01b0383166110b45760405162461bcd60e51b81526004016103c890612230565b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216630271189760e51b1480610443575061044382611737565b6000805b8351811015611157578284828151811061112d57634e487b7160e01b600052603260045260246000fd5b60200260200101511415611145576001915050610443565b8061114f8161263a565b915050611103565b5060009392505050565b81518351146111825760405162461bcd60e51b81526004016103c89061252c565b6001600160a01b0384166111a85760405162461bcd60e51b81526004016103c89061233e565b6111b06115cc565b6001600160a01b0316856001600160a01b031614806111e457506111d26115cc565b6003546001600160a01b039081169116145b806111f657506111f68561037d6115cc565b6112125760405162461bcd60e51b81526004016103c890612383565b600061121c6115cc565b905061122c818787878787610e9a565b60005b845181101561137957600085828151811061125a57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061128657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156112d65760405162461bcd60e51b81526004016103c8906123d5565b6112e082826125cc565b60008085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160008085815260200190815260200160002060008b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461135e91906125b4565b92505081905550505050806113729061263a565b905061122f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113c99291906120fc565b60405180910390a4610e9a818787878787611777565b606081518351146114025760405162461bcd60e51b81526004016103c8906124e3565b600083516001600160401b0381111561142b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611454578160200160208202803683370190505b50905060005b84518110156114f6576114bb85828151811061148657634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106114ae57634e487b7160e01b600052603260045260246000fd5b60200260200101516103a8565b8282815181106114db57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526114ef8161263a565b905061145a565b509392505050565b816001600160a01b03166115106115cc565b6001600160a01b031614156115375760405162461bcd60e51b81526004016103c89061249a565b80600160006115446115cc565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556115886115cc565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115c0919061212a565b60405180910390a35050565b3390565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061161857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b61163b846001600160a01b0316611058565b15610e9a5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906116749089908990889088908890600401611fe0565b602060405180830381600087803b15801561168e57600080fd5b505af19250505080156116be575060408051601f3d908101601f191682019092526116bb91810190611dff565b60015b611707576116ca612687565b806116d557506116ef565b8060405162461bcd60e51b81526004016103c89190612181565b60405162461bcd60e51b81526004016103c890612194565b6001600160e01b0319811663f23a6e6160e01b1461104f5760405162461bcd60e51b81526004016103c8906121e8565b60006001600160e01b03198216636cdb3d1360e11b148061176857506001600160e01b031982166303a24d0760e21b145b80610443575061044382611848565b611789846001600160a01b0316611058565b15610e9a5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906117c29089908990889088908890600401611f82565b602060405180830381600087803b1580156117dc57600080fd5b505af192505050801561180c575060408051601f3d908101601f1916820190925261180991810190611dff565b60015b611818576116ca612687565b6001600160e01b0319811663bc197c8160e01b1461104f5760405162461bcd60e51b81526004016103c8906121e8565b6001600160e01b031981166301ffc9a760e01b14919050565b60405180606001604052806003906020820280368337509192915050565b60008083601f840112611890578182fd5b5081356001600160401b038111156118a6578182fd5b60208301915083602080830285010111156118c057600080fd5b9250929050565b600082601f8301126118d7578081fd5b813560206001600160401b038211156118f2576118f261266b565b80820261190082820161258b565b83815282810190868401838801850189101561191a578687fd5b8693505b8584101561193c57803583526001939093019291840191840161191e565b50979650505050505050565b60008083601f840112611959578182fd5b5081356001600160401b0381111561196f578182fd5b6020830191508360208285010111156118c057600080fd5b600082601f830112611997578081fd5b81356001600160401b038111156119b0576119b061266b565b6119c3601f8201601f191660200161258b565b8181528460208386010111156119d7578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611a02578081fd5b8135611a0d8161272b565b9392505050565b600060208284031215611a25578081fd5b8151611a0d8161272b565b60008060408385031215611a42578081fd5b8235611a4d8161272b565b91506020830135611a5d8161272b565b809150509250929050565b60008060008060008060008060a0898b031215611a83578384fd5b8835611a8e8161272b565b97506020890135611a9e8161272b565b965060408901356001600160401b0380821115611ab9578586fd5b611ac58c838d0161187f565b909850965060608b0135915080821115611add578586fd5b611ae98c838d0161187f565b909650945060808b0135915080821115611b01578384fd5b50611b0e8b828c01611948565b999c989b5096995094979396929594505050565b600080600080600060a08688031215611b39578081fd5b8535611b448161272b565b94506020860135611b548161272b565b935060408601356001600160401b0380821115611b6f578283fd5b611b7b89838a016118c7565b94506060880135915080821115611b90578283fd5b611b9c89838a016118c7565b93506080880135915080821115611bb1578283fd5b50611bbe88828901611987565b9150509295509295909350565b60008060008060008060a08789031215611be3578182fd5b8635611bee8161272b565b95506020870135611bfe8161272b565b9450604087013593506060870135925060808701356001600160401b03811115611c26578283fd5b611c3289828a01611948565b979a9699509497509295939492505050565b600080600080600060a08688031215611c5b578283fd5b8535611c668161272b565b94506020860135611c768161272b565b9350604086013592506060860135915060808601356001600160401b03811115611c9e578182fd5b611bbe88828901611987565b60008060408385031215611cbc578182fd5b8235611cc78161272b565b915060208301358015158114611a5d578182fd5b6000806000806000858703610120811215611cf4578384fd5b8635611cff8161272b565b955060c0601f1982011215611d12578384fd5b5060208601935060e08601356001600160401b03811115611d31578384fd5b611d3d88828901611948565b9699959850966101000135949350505050565b60008060408385031215611d62578182fd5b8235611d6d8161272b565b946020939093013593505050565b60008060008060408587031215611d90578182fd5b84356001600160401b0380821115611da6578384fd5b611db28883890161187f565b90965094506020870135915080821115611dca578384fd5b50611dd78782880161187f565b95989497509550505050565b600060208284031215611df4578081fd5b8135611a0d81612743565b600060208284031215611e10578081fd5b8151611a0d81612743565b600060208284031215611e2c578081fd5b815160048110611a0d578182fd5b600060208284031215611e4b578081fd5b815161ffff81168114611a0d578182fd5b600060208284031215611e6d578081fd5b5035919050565b600060208284031215611e85578081fd5b5051919050565b60008060408385031215611e9e578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015611edc57815187529582019590820190600101611ec0565b509495945050505050565b60008151808452815b81811015611f0c57602081850181015186830182015201611ef0565b81811115611f1d5782602083870101525b50601f01601f19169290920160200192915050565b80356001600160401b038116808214611f4a57600080fd5b835250602081013560ff8116808214611f6257600080fd5b80602085015250505050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a060408201819052600090611fae90830186611ead565b8281036060840152611fc08186611ead565b90508281036080840152611fd48185611ee7565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061201a90830184611ee7565b979650505050505050565b6001600160a01b038516815260006101006120436020840187611f32565b6120536060840160408801611f32565b61206360a0840160808801611f32565b8060e0840152838184015250610120838582850137828401810191909152601f909201601f191601019392505050565b6001600160a01b039390931683526020830191909152604082015260600190565b60608101818360005b60038110156120e057815161ffff168352602092830192909101906001016120bd565b50505092915050565b600060208252611a0d6020830184611ead565b60006040825261210f6040830185611ead565b82810360208401526121218185611ead565b95945050505050565b901515815260200190565b6001600160e01b031991909116815260200190565b602081016004831061216c57634e487b7160e01b600052602160045260246000fd5b91905290565b61ffff91909116815260200190565b600060208252611a0d6020830184611ee7565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252818101527f436f6d6d756e697479204e46542063616e277420626520747261736665726564604082015260600190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f436f6d6d756e697479204e465420646f65736e2774206861766520612062616c60408201526430b731b29760d91b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526024908201527f54686572652061726520616c7265616479203234206d656d626572732c20736f6040820152637272792160e01b606082015260800190565b60208082526018908201527f596f75206861766520616c7265616479206a6f696e6564210000000000000000604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b90815260200190565b918252602082015260400190565b6040518181016001600160401b03811182821017156125ac576125ac61266b565b604052919050565b600082198211156125c7576125c7612655565b500190565b6000828210156125de576125de612655565b500390565b6002810460018216806125f757607f821691505b6020821081141561057d57634e487b7160e01b600052602260045260246000fd5b600061ffff8083168181141561263057612630612655565b6001019392505050565b600060001982141561264e5761264e612655565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d10156126975761071c565b600481823e6308c379a06126ab8251612681565b146126b55761071c565b6040513d600319016004823e80513d6001600160401b0381602484011181841117156126e4575050505061071c565b828401925082519150808211156126fe575050505061071c565b503d830160208284010111156127165750505061071c565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461274057600080fd5b50565b6001600160e01b03198116811461274057600080fdfea264697066735822122054e37457f84cd74e94c723f0819ad252f8a307f6a327344439582814e9210a2a64736f6c63430008000033608060405234801561001057600080fd5b5060405161031a38038061031a83398101604081905261002f9161013b565b60008054336001600160a01b031991821681179092556001805490911690911780825585919060ff60a01b1916600160a01b83600381111561008157634e487b7160e01b600052602160045260246000fd5b021790555060026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0805460ff94851661ffff19918216179091557f679795a0195a1b76cdebb7c51d74e058aee92919b8c3389af86ef24535e8a28c80549385169382169390931790925560036000527f88601476d11616a71c5be67555bd1dff4b1cbf21533d2669b768b61518cfe1c3805491909316911617905550610193565b805160ff8116811461013657600080fd5b919050565b60008060008060808587031215610150578384fd5b84516004811061015e578485fd5b935061016c60208601610125565b925061017a60408601610125565b915061018860608601610125565b905092959194509250565b610178806101a26000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636f2ddd931461004657806374b624061461006457806386e476dd14610084575b600080fd5b61004e610099565b60405161005b919061010b565b60405180910390f35b6100776100723660046100ce565b6100a9565b60405161005b9190610133565b61008c6100bf565b60405161005b91906100f7565b600154600160a01b900460ff1681565b60026020526000908152604090205461ffff1681565b6000546001600160a01b031681565b6000602082840312156100df578081fd5b813561ffff811681146100f0578182fd5b9392505050565b6001600160a01b0391909116815260200190565b602081016004831061012d57634e487b7160e01b600052602160045260246000fd5b91905290565b61ffff9190911681526020019056fea2646970667358221220deec5fd2f3a13041b0394ddcdafe02ba630c23af53b1e62a924d99dacddddf7b64736f6c63430008000033c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a264697066735822122008bf65dacc08227df013713c5cee5f8ffa9c32de97ef2fedb9a793124ea28e0364736f6c63430008000033","deployedBytecode":"0x60806040523480156200001157600080fd5b5060043610620000945760003560e01c8063a894d2aa1162000063578063a894d2aa146200011e578063b8ca27081462000128578063be8667691462000141578063c251b56514620001585762000094565b806348b2b32114620000995780637712f55114620000b25780639125268314620000c9578063993fa20b14620000f8575b600080fd5b620000b0620000aa36600462000641565b62000171565b005b620000b0620000c33660046200059b565b62000221565b620000e0620000da36600462000740565b620002d0565b604051620000ef9190620007f2565b60405180910390f35b6200010f6200010936600462000577565b620002fb565b604051620000ef9190620008d4565b620000e062000310565b620001326200031f565b604051620000ef9190620009cc565b620000e06200015236600462000676565b62000325565b620001626200044d565b604051620000ef919062000885565b6001600160a01b03831660009081526020819052604090205460ff16620001b55760405162461bcd60e51b8152600401620001ac9062000995565b60405180910390fd5b604051633cf335a360e11b815283906001600160a01b038216906379e66b4690620001e79086908690600401620009d5565b600060405180830381600087803b1580156200020257600080fd5b505af115801562000217573d6000803e3d6000fd5b5050505050505050565b6001600160a01b03851660009081526020819052604090205460ff166200025c5760405162461bcd60e51b8152600401620001ac9062000995565b604051637712f55160e01b815285906001600160a01b03821690637712f5519062000294903390899089908990899060040162000806565b600060405180830381600087803b158015620002af57600080fd5b505af1158015620002c4573d6000803e3d6000fd5b50505050505050505050565b60018181548110620002e157600080fd5b6000918252602090912001546001600160a01b0316905081565b60006020819052908152604090205460ff1681565b6003546001600160a01b031681565b60025481565b6000808989898989898989600360009054906101000a90046001600160a01b0316306040516200035590620004b1565b6200036a9a99989796959493929190620008df565b604051809103906000f08015801562000387573d6000803e3d6000fd5b506001600160a01b0381166000818152602081905260408120805460ff1916600190811790915580548082018255918190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180546001600160a01b03191690921790915560025491925082916200040291620009e3565b6002556040517fb4108a188495a1a681cdc0750af164011025a1773b41e93ff3e628adc037dc299062000437908390620007f2565b60405180910390a19a9950505050505050505050565b60606001805480602002602001604051908101604052809291908181526020018280548015620004a757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000488575b5050505050905090565b613b338062000a1f83390190565b80356001600160a01b0381168114620004d757600080fd5b919050565b600082601f830112620004ed578081fd5b813567ffffffffffffffff808211156200050b576200050b62000a08565b604051601f8301601f19168101602001828111828210171562000532576200053262000a08565b6040528281528483016020018610156200054a578384fd5b82602086016020830137918201602001929092529392505050565b803560ff81168114620004d757600080fd5b60006020828403121562000589578081fd5b6200059482620004bf565b9392505050565b6000806000806000858703610120811215620005b5578182fd5b620005c087620004bf565b955060c0601f1982011215620005d4578182fd5b5060208601935060e086013567ffffffffffffffff80821115620005f6578283fd5b818801915088601f8301126200060a578283fd5b81358181111562000619578384fd5b8960208285010111156200062b578384fd5b9699959850506020019561010001359392505050565b60008060006060848603121562000656578283fd5b6200066184620004bf565b95602085013595506040909401359392505050565b600080600080600080600080610100898b03121562000693578283fd5b883567ffffffffffffffff80821115620006ab578485fd5b620006b98c838d01620004dc565b995060208b0135985060408b0135975060608b0135915080821115620006dd578485fd5b50620006ec8b828c01620004dc565b95505060808901356004811062000701578384fd5b93506200071160a08a0162000565565b92506200072160c08a0162000565565b91506200073160e08a0162000565565b90509295985092959890939650565b60006020828403121562000752578081fd5b5035919050565b6001600160a01b03169052565b60008151808452815b818110156200078d576020818501810151868301820152016200076f565b818111156200079f5782602083870101525b50601f01601f19169290920160200192915050565b803567ffffffffffffffff8116808214620007ce57600080fd5b83525060ff620007e16020830162000565565b1660208301525050565b60ff169052565b6001600160a01b0391909116815260200190565b6001600160a01b03861681526000610120620008266020840188620007b4565b620008386060840160408901620007b4565b6200084a60a0840160808901620007b4565b8060e0840152848184015250610140848682850137828501810191909152610100820192909252601f909201601f1916909101019392505050565b6020808252825182820181905260009190848201906040850190845b81811015620008c85783516001600160a01b031683529284019291840191600101620008a1565b50909695505050505050565b901515815260200190565b6000610140808352620008f58184018e62000766565b90508b60208401528a6040840152828103606084015262000917818b62000766565b915050600488106200093957634e487b7160e01b600052602160045260246000fd5b87608083015260ff871660a08301526200095760c0830187620007eb565b6200096660e0830186620007eb565b6200097661010083018562000759565b6200098661012083018462000759565b9b9a5050505050505050505050565b6020808252601a908201527f496e76616c696420636f6d6d756e697479206164647265737321000000000000604082015260600190565b90815260200190565b918252602082015260400190565b6000821982111562000a0357634e487b7160e01b81526011600452602481fd5b500190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b5060405162003b3338038062003b33833981016040819052620000349162000a6a565b89816200004182620001c0565b600380546001600160a01b03199081166001600160a01b0393841617909155600580548216868416179055600680549091169184169190911790555060405186908690869086906200009390620008a5565b620000a2949392919062000c05565b604051809103906000f080158015620000bf573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b03929092169190911790558651620000f59060079060208a0190620008b3565b50600660009054906101000a90046001600160a01b03166001600160a01b031663b8ca27086040518163ffffffff1660e01b815260040160206040518083038186803b1580156200014557600080fd5b505afa1580156200015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000180919062000b56565b62000195576200018f620001d9565b620001b0565b6200019f620001d9565b6008899055620001b089896200021c565b505050505050505050506200105a565b8051620001d5906002906020840190620008b3565b5050565b620001fb306000604080516020810190915260008152633938700090620003df565b6200021a306001604080516020810190915260008152600190620003df565b565b600954601861ffff9091161115620002515760405162461bcd60e51b8152600401620002489062000ddb565b60405180910390fd5b6000828152600b602052604090205460ff1615620002835760405162461bcd60e51b8152600401620002489062000e1f565b6005546040516331a9108f60e11b81526000916001600160a01b031690636352211e90620002b690869060040162000e97565b60206040518083038186803b158015620002cf57600080fd5b505afa158015620002e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030a919062000a1c565b6000848152600b60205260408120805460ff19166001908117909155600c8054918201815582527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018590556009805492935061ffff9092169190620003708362000f53565b91906101000a81548161ffff021916908361ffff160217905550506200039d8183620004d560201b60201c565b7fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e818484604051620003d29392919062000be4565b60405180910390a1505050565b6001600160a01b038416620004085760405162461bcd60e51b8152600401620002489062000e56565b600062000414620004ff565b90506200043b81600087620004298862000504565b620004348862000504565b8762000560565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906200046d90849062000eae565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b031660008051602062003b138339815191528787604051620004b592919062000ea0565b60405180910390a4620004ce8160008787878762000568565b5050505050565b620001d53083600084604051806020016040528060008152506200069f60201b62000ea21760201c565b335b90565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106200054d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015290505b919050565b505050505050565b62000587846001600160a01b03166200085160201b620010581760201c565b15620005605760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190620005c3908990899088908890889060040162000b9d565b602060405180830381600087803b158015620005de57600080fd5b505af192505050801562000611575060408051601f3d908101601f191682019092526200060e9181019062000a40565b60015b62000663576200062062000faa565b806200062d575062000649565b8060405162461bcd60e51b815260040162000248919062000c49565b60405162461bcd60e51b8152600401620002489062000c5e565b6001600160e01b0319811663f23a6e6160e01b14620006965760405162461bcd60e51b8152600401620002489062000cbb565b50505050505050565b6001600160a01b038416620006c85760405162461bcd60e51b8152600401620002489062000d4c565b620006d2620004ff565b6001600160a01b0316856001600160a01b03161480620007095750620006f7620004ff565b6003546001600160a01b039081169116145b8062000725575062000725856200071f620004ff565b62000857565b620007445760405162461bcd60e51b8152600401620002489062000d03565b600062000750620004ff565b905062000764818787620004298862000504565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015620007a85760405162461bcd60e51b8152600401620002489062000d91565b620007b4848262000ec9565b6000868152602081815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290620007f290849062000eae565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b031660008051602062003b1383398151915288886040516200083992919062000ea0565b60405180910390a46200069682888888888862000568565b3b151590565b60006200087083836200087760201b6200105e1760201c565b5092915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61031a80620037f983390190565b828054620008c19062000f16565b90600052602060002090601f016020900481019282620008e5576000855562000930565b82601f106200090057805160ff191683800117855562000930565b8280016001018555821562000930579182015b828111156200093057825182559160200191906001019062000913565b506200093e92915062000942565b5090565b5b808211156200093e576000815560010162000943565b80516001600160a01b03811681146200055b57600080fd5b8051600481106200055b57600080fd5b600082601f83011262000992578081fd5b81516001600160401b0380821115620009af57620009af62000f8e565b604051601f8301601f191681016020018281118282101715620009d657620009d662000f8e565b604052828152848301602001861015620009ee578384fd5b62000a0183602083016020880162000ee3565b95945050505050565b805160ff811681146200055b57600080fd5b60006020828403121562000a2e578081fd5b62000a398262000959565b9392505050565b60006020828403121562000a52578081fd5b81516001600160e01b03198116811462000a39578182fd5b6000806000806000806000806000806101408b8d03121562000a8a578586fd5b8a516001600160401b038082111562000aa1578788fd5b62000aaf8e838f0162000981565b9b5060208d01519a5060408d0151995060608d015191508082111562000ad3578788fd5b5062000ae28d828e0162000981565b97505062000af360808c0162000971565b955062000b0360a08c0162000a0a565b945062000b1360c08c0162000a0a565b935062000b2360e08c0162000a0a565b925062000b346101008c0162000959565b915062000b456101208c0162000959565b90509295989b9194979a5092959850565b60006020828403121562000b68578081fd5b5051919050565b6000815180845262000b8981602086016020860162000ee3565b601f01601f19169290920160200192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009062000bd99083018462000b6f565b979650505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b608081016004861062000c2857634e487b7160e01b600052602160045260246000fd5b94815260ff9384166020820152918316604083015290911660609091015290565b60006020825262000a39602083018462000b6f565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560408201527f526563656976657220696d706c656d656e746572000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526024908201527f54686572652061726520616c7265616479203234206d656d626572732c20736f6040820152637272792160e01b606082015260800190565b60208082526018908201527f596f75206861766520616c7265616479206a6f696e6564210000000000000000604082015260600190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b90815260200190565b918252602082015260400190565b6000821982111562000ec45762000ec462000f78565b500190565b60008282101562000ede5762000ede62000f78565b500390565b60005b8381101562000f0057818101518382015260200162000ee6565b8381111562000f10576000848401525b50505050565b60028104600182168062000f2b57607f821691505b6020821081141562000f4d57634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff8083168181141562000f6e5762000f6e62000f78565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d101562000fbc5762000501565b600481823e6308c379a062000fd2825162000fa4565b1462000fde5762000501565b6040513d600319016004823e80513d6001600160401b0380831160248401831017156200100f575050505062000501565b828401925082519150808211156200102b575050505062000501565b503d83016020828401011115620010455750505062000501565b601f01601f1916810160200160405291505090565b61278f806200106a6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80637c8da89d116100de578063bedf77a611610097578063e28cf15911610071578063e28cf15914610367578063e985e9c51461036f578063f23a6e6114610382578063f242432a146103955761018d565b8063bedf77a61461032e578063cfeaeb8b14610341578063d50c7377146103545761018d565b80637c8da89d146102ab5780638f853115146102c0578063a22cb465146102d3578063abb88bcc146102e6578063b887b087146102fb578063bc197c811461030e5761018d565b80631a98ce751161014b5780634e1273f4116101255780634e1273f4146102505780635aa97b06146102705780637712f5511461028557806379e66b46146102985761018d565b80631a98ce75146102135780632eb2c2d614610226578063321c48f21461023b5761018d565b8062fdd58e14610192578063019c08f5146101bb57806301ffc9a7146101c357806306fdde03146101e35780630e89341c146101f8578063135b41651461020b575b600080fd5b6101a56101a0366004611d50565b6103a8565b6040516101b29190612574565b60405180910390f35b6101a56103e2565b6101d66101d1366004611de3565b6103e8565b6040516101b2919061212a565b6101eb610449565b6040516101b29190612181565b6101eb610206366004611e5c565b6104d7565b6101a561056b565b6101a56102213660046119f1565b610571565b610239610234366004611a68565b610583565b005b610243610691565b6040516101b2919061214a565b61026361025e366004611d7b565b61071f565b6040516101b291906120e9565b6102786107f3565b6040516101b291906120b4565b610239610293366004611cdb565b6109b3565b6102396102a6366004611e8c565b610b93565b6102b3610d35565b6040516101b29190612172565b6101a56102ce366004611e5c565b610d3f565b6102396102e1366004611caa565b610d60565b6102ee610d6e565b6040516101b29190611f6e565b610239610309366004611d50565b610d7d565b61032161031c366004611b22565b610d9a565b6040516101b29190612135565b61023961033c3660046119f1565b610dab565b61023961034f366004611d50565b610de5565b6101d6610362366004611e5c565b610e02565b610263610e17565b6101d661037d366004611a30565b610e1c565b610321610390366004611c44565b610e28565b6102396103a3366004611bcb565b610e39565b600081156103d15760405162461bcd60e51b81526004016103c8906122f9565b60405180910390fd5b6103db838361108c565b5092915050565b60085481565b60006001600160e01b03198216636cdb3d1360e11b148061041957506001600160e01b031982166303a24d0760e21b145b8061043457506001600160e01b03198216630271189760e51b145b806104435750610443826110da565b92915050565b60078054610456906125e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610482906125e3565b80156104cf5780601f106104a4576101008083540402835291602001916104cf565b820191906000526020600020905b8154815290600101906020018083116104b257829003601f168201915b505050505081565b6060600280546104e6906125e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610512906125e3565b801561055f5780601f106105345761010080835404028352916020019161055f565b820191906000526020600020905b81548152906001019060200180831161054257829003601f168201915b50505050509050919050565b600a5481565b600061057d828261108c565b50919050565b6105c7868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250600192506105c2915050565b6110ff565b156105e45760405162461bcd60e51b81526004016103c89061227b565b610687888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061116192505050565b5050505050505050565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316636f2ddd936040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e157600080fd5b505afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190611e1b565b90505b90565b6060610760838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250600192506105c2915050565b1561077d5760405162461bcd60e51b81526004016103c89061227b565b6107ea858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506113df92505050565b50949350505050565b6107fb611861565b60048054604051633a5b120360e11b81526000926001600160a01b03909216916374b624069161082e9160019101612172565b60206040518083038186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190611e3a565b60048054604051633a5b120360e11b81529293506000926001600160a01b03909116916374b62406916108b49160029101612172565b60206040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109049190611e3a565b60048054604051633a5b120360e11b81529293506000926001600160a01b03909116916374b624069161093a9160039101612172565b60206040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190611e3a565b6040805160608101825261ffff9586168152938516602085015293169282019290925291505090565b600954601861ffff90911611156109dc5760405162461bcd60e51b81526004016103c89061241f565b600554604051630a73b69d60e01b81526001600160a01b0390911690630a73b69d90610a12908890889088908890600401612025565b600060405180830381600087803b158015610a2c57600080fd5b505af1158015610a40573d6000803e3d6000fd5b50506005546040516342ca962960e01b8152600093506001600160a01b0390911691506342ca962990610a77908990600401611f6e565b60206040518083038186803b158015610a8f57600080fd5b505afa158015610aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac79190611e74565b6000818152600b60205260408120805460ff19166001908117909155600c8054918201815582527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018290556009805492935061ffff9092169190610b2b83612618565b91906101000a81548161ffff021916908361ffff16021790555050610b508683610d7d565b7fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e868284604051610b8393929190612093565b60405180910390a1505050505050565b600954601861ffff9091161115610bbc5760405162461bcd60e51b81526004016103c89061241f565b6000828152600b602052604090205460ff1615610beb5760405162461bcd60e51b81526004016103c890612463565b6005546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610c1c908690600401612574565b60206040518083038186803b158015610c3457600080fd5b505afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c9190611a14565b6000848152600b60205260408120805460ff19166001908117909155600c8054918201815582527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018590556009805492935061ffff9092169190610cd083612618565b91906101000a81548161ffff021916908361ffff16021790555050610cf58183610d7d565b7fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e818484604051610d2893929190612093565b60405180910390a1505050565b60095461ffff1681565b600c8181548110610d4f57600080fd5b600091825260209091200154905081565b610d6a82826114fe565b5050565b6004546001600160a01b031690565b610d6a308360008460405180602001604052806000815250610ea2565b63bc197c8160e01b95945050505050565b7fbea911b50ccdd2233b28faa49766c3cbd0631608f32e5a724d7b83b32b681ad081604051610dda9190611f6e565b60405180910390a150565b610d6a823060008460405180602001604052806000815250610ea2565b600b6020526000908152604090205460ff1681565b606090565b60006103db838361105e565b63f23a6e6160e01b95945050505050565b8315610e575760405162461bcd60e51b81526004016103c89061227b565b610e9a8686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ea292505050565b505050505050565b6001600160a01b038416610ec85760405162461bcd60e51b81526004016103c89061233e565b610ed06115cc565b6001600160a01b0316856001600160a01b03161480610f045750610ef26115cc565b6003546001600160a01b039081169116145b80610f165750610f168561037d6115cc565b610f325760405162461bcd60e51b81526004016103c8906122b0565b6000610f3c6115cc565b9050610f5c818787610f4d886115d0565b610f56886115d0565b87610e9a565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610f9d5760405162461bcd60e51b81526004016103c8906123d5565b610fa784826125cc565b6000868152602081815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290610fe39084906125b4565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161103992919061257d565b60405180910390a461104f828888888888611629565b50505050505050565b3b151590565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b60006001600160a01b0383166110b45760405162461bcd60e51b81526004016103c890612230565b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216630271189760e51b1480610443575061044382611737565b6000805b8351811015611157578284828151811061112d57634e487b7160e01b600052603260045260246000fd5b60200260200101511415611145576001915050610443565b8061114f8161263a565b915050611103565b5060009392505050565b81518351146111825760405162461bcd60e51b81526004016103c89061252c565b6001600160a01b0384166111a85760405162461bcd60e51b81526004016103c89061233e565b6111b06115cc565b6001600160a01b0316856001600160a01b031614806111e457506111d26115cc565b6003546001600160a01b039081169116145b806111f657506111f68561037d6115cc565b6112125760405162461bcd60e51b81526004016103c890612383565b600061121c6115cc565b905061122c818787878787610e9a565b60005b845181101561137957600085828151811061125a57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061128657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156112d65760405162461bcd60e51b81526004016103c8906123d5565b6112e082826125cc565b60008085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160008085815260200190815260200160002060008b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461135e91906125b4565b92505081905550505050806113729061263a565b905061122f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113c99291906120fc565b60405180910390a4610e9a818787878787611777565b606081518351146114025760405162461bcd60e51b81526004016103c8906124e3565b600083516001600160401b0381111561142b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611454578160200160208202803683370190505b50905060005b84518110156114f6576114bb85828151811061148657634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106114ae57634e487b7160e01b600052603260045260246000fd5b60200260200101516103a8565b8282815181106114db57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526114ef8161263a565b905061145a565b509392505050565b816001600160a01b03166115106115cc565b6001600160a01b031614156115375760405162461bcd60e51b81526004016103c89061249a565b80600160006115446115cc565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556115886115cc565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115c0919061212a565b60405180910390a35050565b3390565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061161857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b61163b846001600160a01b0316611058565b15610e9a5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906116749089908990889088908890600401611fe0565b602060405180830381600087803b15801561168e57600080fd5b505af19250505080156116be575060408051601f3d908101601f191682019092526116bb91810190611dff565b60015b611707576116ca612687565b806116d557506116ef565b8060405162461bcd60e51b81526004016103c89190612181565b60405162461bcd60e51b81526004016103c890612194565b6001600160e01b0319811663f23a6e6160e01b1461104f5760405162461bcd60e51b81526004016103c8906121e8565b60006001600160e01b03198216636cdb3d1360e11b148061176857506001600160e01b031982166303a24d0760e21b145b80610443575061044382611848565b611789846001600160a01b0316611058565b15610e9a5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906117c29089908990889088908890600401611f82565b602060405180830381600087803b1580156117dc57600080fd5b505af192505050801561180c575060408051601f3d908101601f1916820190925261180991810190611dff565b60015b611818576116ca612687565b6001600160e01b0319811663bc197c8160e01b1461104f5760405162461bcd60e51b81526004016103c8906121e8565b6001600160e01b031981166301ffc9a760e01b14919050565b60405180606001604052806003906020820280368337509192915050565b60008083601f840112611890578182fd5b5081356001600160401b038111156118a6578182fd5b60208301915083602080830285010111156118c057600080fd5b9250929050565b600082601f8301126118d7578081fd5b813560206001600160401b038211156118f2576118f261266b565b80820261190082820161258b565b83815282810190868401838801850189101561191a578687fd5b8693505b8584101561193c57803583526001939093019291840191840161191e565b50979650505050505050565b60008083601f840112611959578182fd5b5081356001600160401b0381111561196f578182fd5b6020830191508360208285010111156118c057600080fd5b600082601f830112611997578081fd5b81356001600160401b038111156119b0576119b061266b565b6119c3601f8201601f191660200161258b565b8181528460208386010111156119d7578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611a02578081fd5b8135611a0d8161272b565b9392505050565b600060208284031215611a25578081fd5b8151611a0d8161272b565b60008060408385031215611a42578081fd5b8235611a4d8161272b565b91506020830135611a5d8161272b565b809150509250929050565b60008060008060008060008060a0898b031215611a83578384fd5b8835611a8e8161272b565b97506020890135611a9e8161272b565b965060408901356001600160401b0380821115611ab9578586fd5b611ac58c838d0161187f565b909850965060608b0135915080821115611add578586fd5b611ae98c838d0161187f565b909650945060808b0135915080821115611b01578384fd5b50611b0e8b828c01611948565b999c989b5096995094979396929594505050565b600080600080600060a08688031215611b39578081fd5b8535611b448161272b565b94506020860135611b548161272b565b935060408601356001600160401b0380821115611b6f578283fd5b611b7b89838a016118c7565b94506060880135915080821115611b90578283fd5b611b9c89838a016118c7565b93506080880135915080821115611bb1578283fd5b50611bbe88828901611987565b9150509295509295909350565b60008060008060008060a08789031215611be3578182fd5b8635611bee8161272b565b95506020870135611bfe8161272b565b9450604087013593506060870135925060808701356001600160401b03811115611c26578283fd5b611c3289828a01611948565b979a9699509497509295939492505050565b600080600080600060a08688031215611c5b578283fd5b8535611c668161272b565b94506020860135611c768161272b565b9350604086013592506060860135915060808601356001600160401b03811115611c9e578182fd5b611bbe88828901611987565b60008060408385031215611cbc578182fd5b8235611cc78161272b565b915060208301358015158114611a5d578182fd5b6000806000806000858703610120811215611cf4578384fd5b8635611cff8161272b565b955060c0601f1982011215611d12578384fd5b5060208601935060e08601356001600160401b03811115611d31578384fd5b611d3d88828901611948565b9699959850966101000135949350505050565b60008060408385031215611d62578182fd5b8235611d6d8161272b565b946020939093013593505050565b60008060008060408587031215611d90578182fd5b84356001600160401b0380821115611da6578384fd5b611db28883890161187f565b90965094506020870135915080821115611dca578384fd5b50611dd78782880161187f565b95989497509550505050565b600060208284031215611df4578081fd5b8135611a0d81612743565b600060208284031215611e10578081fd5b8151611a0d81612743565b600060208284031215611e2c578081fd5b815160048110611a0d578182fd5b600060208284031215611e4b578081fd5b815161ffff81168114611a0d578182fd5b600060208284031215611e6d578081fd5b5035919050565b600060208284031215611e85578081fd5b5051919050565b60008060408385031215611e9e578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015611edc57815187529582019590820190600101611ec0565b509495945050505050565b60008151808452815b81811015611f0c57602081850181015186830182015201611ef0565b81811115611f1d5782602083870101525b50601f01601f19169290920160200192915050565b80356001600160401b038116808214611f4a57600080fd5b835250602081013560ff8116808214611f6257600080fd5b80602085015250505050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a060408201819052600090611fae90830186611ead565b8281036060840152611fc08186611ead565b90508281036080840152611fd48185611ee7565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061201a90830184611ee7565b979650505050505050565b6001600160a01b038516815260006101006120436020840187611f32565b6120536060840160408801611f32565b61206360a0840160808801611f32565b8060e0840152838184015250610120838582850137828401810191909152601f909201601f191601019392505050565b6001600160a01b039390931683526020830191909152604082015260600190565b60608101818360005b60038110156120e057815161ffff168352602092830192909101906001016120bd565b50505092915050565b600060208252611a0d6020830184611ead565b60006040825261210f6040830185611ead565b82810360208401526121218185611ead565b95945050505050565b901515815260200190565b6001600160e01b031991909116815260200190565b602081016004831061216c57634e487b7160e01b600052602160045260246000fd5b91905290565b61ffff91909116815260200190565b600060208252611a0d6020830184611ee7565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252818101527f436f6d6d756e697479204e46542063616e277420626520747261736665726564604082015260600190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f436f6d6d756e697479204e465420646f65736e2774206861766520612062616c60408201526430b731b29760d91b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526024908201527f54686572652061726520616c7265616479203234206d656d626572732c20736f6040820152637272792160e01b606082015260800190565b60208082526018908201527f596f75206861766520616c7265616479206a6f696e6564210000000000000000604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b90815260200190565b918252602082015260400190565b6040518181016001600160401b03811182821017156125ac576125ac61266b565b604052919050565b600082198211156125c7576125c7612655565b500190565b6000828210156125de576125de612655565b500390565b6002810460018216806125f757607f821691505b6020821081141561057d57634e487b7160e01b600052602260045260246000fd5b600061ffff8083168181141561263057612630612655565b6001019392505050565b600060001982141561264e5761264e612655565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d10156126975761071c565b600481823e6308c379a06126ab8251612681565b146126b55761071c565b6040513d600319016004823e80513d6001600160401b0381602484011181841117156126e4575050505061071c565b828401925082519150808211156126fe575050505061071c565b503d830160208284010111156127165750505061071c565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461274057600080fd5b50565b6001600160e01b03198116811461274057600080fdfea264697066735822122054e37457f84cd74e94c723f0819ad252f8a307f6a327344439582814e9210a2a64736f6c63430008000033608060405234801561001057600080fd5b5060405161031a38038061031a83398101604081905261002f9161013b565b60008054336001600160a01b031991821681179092556001805490911690911780825585919060ff60a01b1916600160a01b83600381111561008157634e487b7160e01b600052602160045260246000fd5b021790555060026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0805460ff94851661ffff19918216179091557f679795a0195a1b76cdebb7c51d74e058aee92919b8c3389af86ef24535e8a28c80549385169382169390931790925560036000527f88601476d11616a71c5be67555bd1dff4b1cbf21533d2669b768b61518cfe1c3805491909316911617905550610193565b805160ff8116811461013657600080fd5b919050565b60008060008060808587031215610150578384fd5b84516004811061015e578485fd5b935061016c60208601610125565b925061017a60408601610125565b915061018860608601610125565b905092959194509250565b610178806101a26000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636f2ddd931461004657806374b624061461006457806386e476dd14610084575b600080fd5b61004e610099565b60405161005b919061010b565b60405180910390f35b6100776100723660046100ce565b6100a9565b60405161005b9190610133565b61008c6100bf565b60405161005b91906100f7565b600154600160a01b900460ff1681565b60026020526000908152604090205461ffff1681565b6000546001600160a01b031681565b6000602082840312156100df578081fd5b813561ffff811681146100f0578182fd5b9392505050565b6001600160a01b0391909116815260200190565b602081016004831061012d57634e487b7160e01b600052602160045260246000fd5b91905290565b61ffff9190911681526020019056fea2646970667358221220deec5fd2f3a13041b0394ddcdafe02ba630c23af53b1e62a924d99dacddddf7b64736f6c63430008000033c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a264697066735822122008bf65dacc08227df013713c5cee5f8ffa9c32de97ef2fedb9a793124ea28e0364736f6c63430008000033","abi":[{"inputs":[{"internalType":"address","name":"_skillWalletAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_newCommunityAddress","type":"address"}],"name":"CommunityCreated","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"communityAddresses","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_url","type":"string"},{"internalType":"uint256","name":"_ownerId","type":"uint256"},{"internalType":"uint256","name":"_ownerCredits","type":"uint256"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"enum Types.Template","name":"_template","type":"uint8"},{"internalType":"uint8","name":"_positionalValue1","type":"uint8"},{"internalType":"uint8","name":"_positionalValue2","type":"uint8"},{"internalType":"uint8","name":"_positionalValue3","type":"uint8"}],"name":"createCommunity","outputs":[{"internalType":"address","name":"_communityAddress","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCommunities","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isCommunity","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"community","type":"address"},{"internalType":"uint256","name":"skillWalletTokenId","type":"uint256"},{"internalType":"uint256","name":"credits","type":"uint256"}],"name":"joinExistingSW","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"community","type":"address"},{"components":[{"components":[{"internalType":"uint64","name":"displayStringId","type":"uint64"},{"internalType":"uint8","name":"level","type":"uint8"}],"internalType":"struct Types.Skill","name":"skill1","type":"tuple"},{"components":[{"internalType":"uint64","name":"displayStringId","type":"uint64"},{"internalType":"uint8","name":"level","type":"uint8"}],"internalType":"struct Types.Skill","name":"skill2","type":"tuple"},{"components":[{"internalType":"uint64","name":"displayStringId","type":"uint64"},{"internalType":"uint8","name":"level","type":"uint8"}],"internalType":"struct Types.Skill","name":"skill3","type":"tuple"}],"internalType":"struct Types.SkillSet","name":"skillSet","type":"tuple"},{"internalType":"string","name":"uri","type":"string"},{"internalType":"uint256","name":"credits","type":"uint256"}],"name":"joinNewMember","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"numOfCommunities","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"skillWalletAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}