{"metadata":"{\"compiler\":{\"version\":\"0.7.4\"},\"sources\":{\"contracts/CommunitiesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"./Community.sol\\\";\\r\\nimport \\\"./Membership.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DistributedTown CommunitiesRegistry\\r\\n *\\r\\n * @dev Implementation of the CommunitiesRegistry contract, which is a Factory and Registry of Communities\\r\\n * @author DistributedTown\\r\\n */\\r\\ncontract CommunitiesRegistry {\\r\\n    event CommunityCreated(address _newCommunityAddress);\\r\\n\\r\\n    mapping(address => bool) public isCommunity;\\r\\n    address[] public communityAddresses;\\r\\n    uint256 public numOfCommunities;\\r\\n    address public skillWalletAddress;\\r\\n\\r\\n    constructor(address _skillWalletAddress) public {\\r\\n        skillWalletAddress = _skillWalletAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a community\\r\\n     * @return _communityAddress the newly created Community address\\r\\n     **/\\r\\n    function createCommunity(\\r\\n        string memory _url,\\r\\n        uint256 _ownerId,\\r\\n        uint256 _ownerCredits,\\r\\n        string memory _name,\\r\\n        Types.Template _template,\\r\\n        uint8 _positionalValue1,\\r\\n        uint8 _positionalValue2,\\r\\n        uint8 _positionalValue3\\r\\n    ) external returns (address _communityAddress) {\\r\\n        Community community =\\r\\n            new Community(\\r\\n                _url,\\r\\n                _ownerId,\\r\\n                _ownerCredits,\\r\\n                _name,\\r\\n                _template,\\r\\n                _positionalValue1,\\r\\n                _positionalValue2,\\r\\n                _positionalValue3,\\r\\n                skillWalletAddress,\\r\\n                address(this)\\r\\n            );\\r\\n        address newCommunityAddress = address(community);\\r\\n\\r\\n        isCommunity[newCommunityAddress] = true;\\r\\n        communityAddresses.push(newCommunityAddress);\\r\\n        numOfCommunities = numOfCommunities + 1;\\r\\n\\r\\n        emit CommunityCreated(newCommunityAddress);\\r\\n\\r\\n        return newCommunityAddress;\\r\\n    }\\r\\n\\r\\n    function joinNewMember(\\r\\n        address community,\\r\\n        address userAddress,\\r\\n        uint64 displayStringId1,\\r\\n        uint8 level1,\\r\\n        uint64 displayStringId2,\\r\\n        uint8 level2,\\r\\n        uint64 displayStringId3,\\r\\n        uint8 level3,\\r\\n        string calldata uri,\\r\\n        uint256 credits\\r\\n    ) external {\\r\\n        require(isCommunity[community], \\\"Invalid community address!\\\");\\r\\n\\r\\n        Community communityContr = Community(community);\\r\\n        communityContr.joinNewMember(userAddress, displayStringId1, level1, displayStringId2, level2, displayStringId3, level3, uri, credits);\\r\\n    }\\r\\n\\r\\n    function joinExistingSW(\\r\\n        address community,\\r\\n        uint256 skillWalletTokenId,\\r\\n        uint256 credits\\r\\n    ) external {\\r\\n        require(isCommunity[community], \\\"Invalid community address!\\\");\\r\\n\\r\\n        Community communityContr = Community(community);\\r\\n        communityContr.join(skillWalletTokenId, credits);\\r\\n    }\\r\\n\\r\\n    function getCommunities() public view returns(address[] memory) {\\r\\n        return communityAddresses;\\r\\n    }\\r\\n}\\r\\n\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() internal {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"contracts/Community.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\n\\r\\nimport \\\"./Membership.sol\\\";\\r\\nimport \\\"./CommunitiesRegistry.sol\\\";\\r\\nimport \\\"./CommonTypes.sol\\\";\\r\\nimport \\\"./ISkillWallet.sol\\\";\\r\\nimport \\\"./ERC1155.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DistributedTown Community\\r\\n *\\r\\n * @dev Implementation of the Community concept in the scope of the DistributedTown project\\r\\n * @author DistributedTown\\r\\n */\\r\\n\\r\\ncontract Community is ERC1155, ERC1155Holder {\\r\\n    enum TokenType {DiToCredit, Community}\\r\\n\\r\\n    Membership membership;\\r\\n    ISkillWallet skillWallet;\\r\\n\\r\\n    CommunitiesRegistry registry;\\r\\n\\r\\n    string public name;\\r\\n    uint256 public ownerId;\\r\\n    uint16 public activeMembersCount;\\r\\n    uint256 public scarcityScore;\\r\\n    mapping(uint256 => bool) public isMember;\\r\\n    uint256[] public skillWalletIds;\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when a member is added\\r\\n     * @param _member the user which just joined the community\\r\\n     * @param _transferredTokens the amount of transferred dito tokens on join\\r\\n     **/\\r\\n    event MemberAdded(\\r\\n        address _member,\\r\\n        uint256 _skillWalletTokenId,\\r\\n        uint256 _transferredTokens\\r\\n    );\\r\\n    event MemberLeft(address _member);\\r\\n\\r\\n    // add JSON Schema base URL\\r\\n    constructor(\\r\\n        string memory _url,\\r\\n        uint256 _ownerId,\\r\\n        uint256 _ownerCredits,\\r\\n        string memory _name,\\r\\n        Types.Template _template,\\r\\n        uint8 _positionalValue1,\\r\\n        uint8 _positionalValue2,\\r\\n        uint8 _positionalValue3,\\r\\n        address skillWalletAddress,\\r\\n        address communityRegistryAddress\\r\\n    ) public ERC1155(_url, communityRegistryAddress) {\\r\\n        skillWallet = ISkillWallet(skillWalletAddress);\\r\\n        registry = CommunitiesRegistry(communityRegistryAddress);\\r\\n        membership = new Membership(\\r\\n            _template,\\r\\n            _positionalValue1,\\r\\n            _positionalValue2,\\r\\n            _positionalValue3\\r\\n        );\\r\\n        name = _name;\\r\\n        if (registry.numOfCommunities() == 0) {\\r\\n            mintTokens();\\r\\n        } else {\\r\\n            mintTokens();\\r\\n            ownerId = _ownerId;\\r\\n            join(_ownerId, _ownerCredits);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintTokens() internal {\\r\\n        // Fungible DiToCredits ERC-20 token\\r\\n        _mint(address(this), uint256(TokenType.DiToCredit), 96000 * 1e4, \\\"\\\");\\r\\n        // Non-Fungible Community template NFT token\\r\\n        _mint(address(this), uint256(TokenType.Community), 1, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    // check if it's called only from deployer.\\r\\n    function joinNewMember(\\r\\n        address newMemberAddress,\\r\\n        uint64 displayStringId1,\\r\\n        uint8 level1,\\r\\n        uint64 displayStringId2,\\r\\n        uint8 level2,\\r\\n        uint64 displayStringId3,\\r\\n        uint8 level3,\\r\\n        string calldata uri,\\r\\n        uint256 credits\\r\\n    ) public {\\r\\n        require(\\r\\n            activeMembersCount <= 24,\\r\\n            \\\"There are already 24 members, sorry!\\\"\\r\\n        );\\r\\n\\r\\n        Types.SkillSet memory skillSet =\\r\\n            Types.SkillSet(\\r\\n                Types.Skill(displayStringId1, level1),\\r\\n                Types.Skill(displayStringId2, level2),\\r\\n                Types.Skill(displayStringId3, level3)\\r\\n            );\\r\\n\\r\\n        skillWallet.create(newMemberAddress, skillSet, uri);\\r\\n\\r\\n        uint256 tokenId = skillWallet.getSkillWalletIdByOwner(newMemberAddress);\\r\\n\\r\\n        isMember[tokenId] = true;\\r\\n        skillWalletIds.push(tokenId);\\r\\n        activeMembersCount++;\\r\\n\\r\\n        // get the skills from chainlink\\r\\n        // transferToMember(newMemberAddress, credits);\\r\\n        emit MemberAdded(newMemberAddress, tokenId, credits);\\r\\n    }\\r\\n\\r\\n    function join(uint256 skillWalletTokenId, uint256 credits) public {\\r\\n        require(\\r\\n            activeMembersCount <= 24,\\r\\n            \\\"There are already 24 members, sorry!\\\"\\r\\n        );\\r\\n        require(!isMember[skillWalletTokenId], \\\"You have already joined!\\\");\\r\\n\\r\\n        address skillWalletAddress = skillWallet.ownerOf(skillWalletTokenId);\\r\\n\\r\\n        // require(\\r\\n        //     msg.sender == skillWalletAddress,\\r\\n        //     \\\"Only the skill wallet owner can call this function\\\"\\r\\n        // );\\r\\n\\r\\n        isMember[skillWalletTokenId] = true;\\r\\n        skillWalletIds.push(skillWalletTokenId);\\r\\n        activeMembersCount++;\\r\\n\\r\\n        transferToMember(skillWalletAddress, credits);\\r\\n        emit MemberAdded(skillWalletAddress, skillWalletTokenId, credits);\\r\\n    }\\r\\n\\r\\n    function leave(address memberAddress) public {\\r\\n        emit MemberLeft(memberAddress);\\r\\n    }\\r\\n\\r\\n    function getSkillWalletIds()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory skillWalletIds)\\r\\n    {\\r\\n        return skillWalletIds;\\r\\n    }\\r\\n\\r\\n    function transferToMember(address _to, uint256 _value) public {\\r\\n        super.safeTransferFrom(address(this), _to, 0, _value, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function transferToCommunity(address _from, uint256 _value) public {\\r\\n        super.safeTransferFrom(_from, address(this), 0, _value, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) public override {\\r\\n        require(\\r\\n            _id == uint256(TokenType.DiToCredit),\\r\\n            \\\"Community NFT can't be trasfered\\\"\\r\\n        );\\r\\n\\r\\n        super.safeTransferFrom(_from, _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) public override {\\r\\n        require(\\r\\n            !contains(_ids, uint256(TokenType.Community)),\\r\\n            \\\"Community NFT can't be trasfered\\\"\\r\\n        );\\r\\n\\r\\n        super.safeBatchTransferFrom(_from, _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            _id == uint256(TokenType.DiToCredit),\\r\\n            \\\"Community NFT doesn't have a balance.\\\"\\r\\n        );\\r\\n        super.balanceOf(_owner, _id);\\r\\n    }\\r\\n\\r\\n    function diToCreditsBalance(address _owner) public view returns (uint256) {\\r\\n        super.balanceOf(_owner, uint256(TokenType.DiToCredit));\\r\\n    }\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(\\r\\n            !contains(_ids, uint256(TokenType.Community)),\\r\\n            \\\"Community NFT can't be trasfered\\\"\\r\\n        );\\r\\n\\r\\n        super.balanceOfBatch(_owners, _ids);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved)\\r\\n        public\\r\\n        override\\r\\n    {\\r\\n        super.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        super.isApprovedForAll(_owner, _operator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC1155, ERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC1155).interfaceId ||\\r\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\r\\n            // || interfaceId == type(IERC1155Receiver).interfaceId\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function getMembership() public view returns (Membership) {\\r\\n        return membership;\\r\\n    }\\r\\n\\r\\n    function getTemplate() public view returns (Types.Template) {\\r\\n        return membership.template();\\r\\n    }\\r\\n\\r\\n    function getPositionalValues() public view returns (uint16[3] memory) {\\r\\n        uint16 p1 = membership.positionalValues(1);\\r\\n        uint16 p2 = membership.positionalValues(2);\\r\\n        uint16 p3 = membership.positionalValues(3);\\r\\n        return [p1, p2, p3];\\r\\n    }\\r\\n\\r\\n    function contains(uint256[] memory arr, uint256 element)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < arr.length; i++) {\\r\\n            if (arr[i] == element) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\"},\"contracts/CommonTypes.sol\":{\"content\":\"\\nlibrary Types {\\n    struct SkillSet {\\n        Skill skill1;\\n        Skill skill2;\\n        Skill skill3;\\n    }\\n    struct Skill {\\n        uint64 displayStringId;\\n        uint8 level;\\n    }\\n    enum Template {\\n        OpenSource, \\n        Art, \\n        Local,\\n        Other\\n    }\\n}\"},\"contracts/Membership.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Community.sol\\\";\\nimport \\\"./CommonTypes.sol\\\";\\n\\n\\n\\n/**\\n * @title DistributedTown Membership contract\\n *\\n * @dev Implementation of the Membership contract in the scope of the DistributedTown project\\n * @author DistributedTown\\n */\\n\\ncontract Membership {\\n\\n    address public communityAddress;\\n    Community community;\\n    Types.Template public template;\\n    mapping(uint16 => uint16) public positionalValues;\\n\\n    constructor(Types.Template _template, uint8 positionalValue1, uint8 positionalValue2, uint8 positionalValue3) public {\\n        communityAddress = msg.sender;\\n        community = Community(msg.sender);\\n        template = _template;\\n        positionalValues[1] = positionalValue1;\\n        positionalValues[2] = positionalValue2;\\n        positionalValues[3] = positionalValue3;\\n    }\\n\\n}\\n\"},\"contracts/ISkillWallet.sol\":{\"content\":\"\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./CommonTypes.sol\\\";\\n\\ninterface ISkillWallet is IERC721 {\\n\\n    event SkillWalletCreated(address indexed skillWalletOwner, address indexed community, uint256 indexed skillWalletId, Types.SkillSet skillSet);\\n\\n    event SkillWalletActivated(uint256 indexed skillWalletId);\\n\\n    event SkillSetUpdated(uint256 indexed skillWalletId, Types.SkillSet newSkillSet);\\n\\n    event SkillWalletCommunityChanged(uint256 indexed skillWalletId, address newCommunity);\\n\\n    function create(address skillWalletOwner, Types.SkillSet memory skillSet, string memory url) external;\\n\\n    function updateSkillSet(uint256 skillWalletId, Types.SkillSet memory newSkillSet) external;\\n\\n    function activateSkillWallet(uint256 skillWalletId) external;\\n\\n    function changeCommunity(uint256 skillWalletId) external;\\n\\n    function isSkillWalletRegistered(address skillWalletOwner) external view returns (bool status);\\n\\n    function getCommunityHistory(uint256 skillWalletId) external view returns (address[] memory communities);\\n\\n    function getActiveCommunity(uint256 skillWalletId) external view returns (address community);\\n\\n    function getTotalSkillWalletsRegistered() external view returns (uint256);\\n\\n    function getSkillWalletIdByOwner(address skillWalletOwner) external view returns (uint256);\\n\\n    function getSkillSet(uint256 skillWalletId) external view returns (Types.SkillSet memory skillSet);\\n\\n    function isSkillWalletActivated(uint256 skillWalletId) external view returns (bool status);\\n\\n}\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC165.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    // The community registry address\\n    address private _communityRegistry;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_, address communityRegistry_) {\\n        _setURI(uri_);\\n        _communityRegistry = communityRegistry_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155).interfaceId\\n        || interfaceId == type(IERC1155MetadataURI).interfaceId\\n        || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n    public\\n    virtual\\n    override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || _communityRegistry == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n    public\\n    virtual\\n    override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || _communityRegistry == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n    internal\\n    virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n    private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n    private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\"}}}","address":"0x32B2B4B7d6f1a93E959a0355Ae6BDB6CC1E9465c","bytecode":"0x608060405234801561001057600080fd5b506040516144d13803806144d183398101604081905261002f91610054565b600380546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b614440806100916000396000f3fe60806040523480156200001157600080fd5b5060043610620000945760003560e01c8063b8ca27081162000063578063b8ca27081462000111578063be866769146200012a578063c251b5651462000141578063ee2db5c1146200015a5762000094565b806348b2b32114620000995780639125268314620000b2578063993fa20b14620000e1578063a894d2aa1462000107575b600080fd5b620000b0620000aa366004620006c4565b62000171565b005b620000c9620000c3366004620007c3565b62000221565b604051620000d8919062000837565b60405180910390f35b620000f8620000f23660046200058c565b6200024c565b604051620000d8919062000925565b620000c962000261565b6200011b62000270565b604051620000d89190620009fc565b620000c96200013b366004620006f9565b62000276565b6200014b62000395565b604051620000d89190620008d6565b620000b06200016b366004620005b0565b620003f9565b6001600160a01b03831660009081526020819052604090205460ff16620001b55760405162461bcd60e51b8152600401620001ac90620009c5565b60405180910390fd5b604051633cf335a360e11b815283906001600160a01b038216906379e66b4690620001e7908690869060040162000a05565b600060405180830381600087803b1580156200020257600080fd5b505af115801562000217573d6000803e3d6000fd5b5050505050505050565b600181815481106200023257600080fd5b6000918252602090912001546001600160a01b0316905081565b60006020819052908152604090205460ff1681565b6003546001600160a01b031681565b60025481565b6000808989898989898989600360009054906101000a90046001600160a01b031630604051620002a690620004b8565b620002bb9a9998979695949392919062000930565b604051809103906000f080158015620002d8573d6000803e3d6000fd5b506001600160a01b038116600081815260208190526040808220805460ff1916600190811790915580548082018255928190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920180546001600160a01b0319169093179092556002805490910190555190915081907fb4108a188495a1a681cdc0750af164011025a1773b41e93ff3e628adc037dc29906200037f90839062000837565b60405180910390a19a9950505050505050505050565b60606001805480602002602001604051908101604052809291908181526020018280548015620003ef57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620003d0575b5050505050905090565b6001600160a01b038b1660009081526020819052604090205460ff16620004345760405162461bcd60e51b8152600401620001ac90620009c5565b604051630613526560e01b81528b906001600160a01b0382169063061352659062000476908e908e908e908e908e908e908e908e908e908e906004016200084b565b600060405180830381600087803b1580156200049157600080fd5b505af1158015620004a6573d6000803e3d6000fd5b50505050505050505050505050505050565b6139f78062000a1483390190565b80356001600160a01b0381168114620004de57600080fd5b919050565b600082601f830112620004f4578081fd5b813567ffffffffffffffff808211156200050a57fe5b604051601f8301601f1916810160200182811182821017156200052957fe5b6040528281529250828483016020018610156200054557600080fd5b8260208601602083013760006020848301015250505092915050565b803567ffffffffffffffff81168114620004de57600080fd5b803560ff81168114620004de57600080fd5b6000602082840312156200059e578081fd5b620005a982620004c6565b9392505050565b60008060008060008060008060008060006101408c8e031215620005d2578687fd5b620005dd8c620004c6565b9a50620005ed60208d01620004c6565b9950620005fd60408d0162000561565b98506200060d60608d016200057a565b97506200061d60808d0162000561565b96506200062d60a08d016200057a565b95506200063d60c08d0162000561565b94506200064d60e08d016200057a565b93506101008c013567ffffffffffffffff808211156200066b578485fd5b818e0191508e601f8301126200067f578485fd5b8135818111156200068e578586fd5b8f6020828501011115620006a0578586fd5b6020830195508094505050506101208c013590509295989b509295989b9093969950565b600080600060608486031215620006d9578283fd5b620006e484620004c6565b95602085013595506040909401359392505050565b600080600080600080600080610100898b03121562000716578384fd5b883567ffffffffffffffff808211156200072e578586fd5b6200073c8c838d01620004e3565b995060208b0135985060408b0135975060608b013591508082111562000760578586fd5b506200076f8b828c01620004e3565b95505060808901356004811062000784578485fd5b93506200079460a08a016200057a565b9250620007a460c08a016200057a565b9150620007b460e08a016200057a565b90509295985092959890939650565b600060208284031215620007d5578081fd5b5035919050565b6001600160a01b03169052565b60008151808452815b818110156200081057602081850181015186830182015201620007f2565b81811115620008225782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038b16815267ffffffffffffffff8a8116602083015260ff8a811660408401528982166060840152888116608084015290871660a0830152851660c082015261012060e0820181905281018390526000610140848682850137828501810191909152610100820192909252601f909201601f19169091010198975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015620009195783516001600160a01b031683529284019291840191600101620008f2565b50909695505050505050565b901515815260200190565b6000610140808352620009468184018e620007e9565b90508b60208401528a6040840152828103606084015262000968818b620007e9565b915050600488106200097657fe5b6080820188905260ff87811660a084015286811660c0840152851660e08301526001600160a01b038416610100830152620009b6610120830184620007dc565b9b9a5050505050505050505050565b6020808252601a908201527f496e76616c696420636f6d6d756e697479206164647265737321000000000000604082015260600190565b90815260200190565b91825260208201526040019056fe60806040523480156200001157600080fd5b50604051620039f7380380620039f7833981016040819052620000349162000c31565b8981620000486301ffc9a760e01b620001f9565b62000053826200027e565b600480546001600160a01b0319166001600160a01b03929092169190911790555062000086630271189760e51b620001f9565b600680546001600160a01b038085166001600160a01b03199283161790925560078054928416929091169190911790556040518690869086908690620000cc9062000a76565b620000db949392919062000d57565b604051809103906000f080158015620000f8573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b039290921691909117905586516200012e9060089060208a019062000a84565b50600760009054906101000a90046001600160a01b03166001600160a01b031663b8ca27086040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017e57600080fd5b505afa15801562000193573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b9919062000d1d565b620001ce57620001c862000297565b620001e9565b620001d862000297565b6009899055620001e98989620002da565b5050505050505050505062000ec1565b6001600160e01b0319808216141562000259576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b80516200029390600390602084019062000a84565b5050565b620002b930600060408051602081019091526000815263393870009062000481565b620002d830600160408051602081019091526000815260019062000481565b565b600a54601861ffff90911611156200030f5760405162461bcd60e51b8152600401620003069062000d87565b60405180910390fd5b6000828152600c602052604090205460ff1615620003415760405162461bcd60e51b8152600401620003069062000dcb565b6006546040516331a9108f60e11b81526000916001600160a01b031690636352211e906200037490869060040162000e02565b60206040518083038186803b1580156200038d57600080fd5b505afa158015620003a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003c8919062000c0d565b6000848152600c602052604081208054600160ff199091168117909155600d8054808301825592527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101859055600a805461ffff19811661ffff9182169093011691909117905590506200043f81836200056a565b7fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e818484604051620004749392919062000d36565b60405180910390a1505050565b6001600160a01b038416620004c85760405162461bcd60e51b8152600401808060200182810382526021815260200180620039d66021913960400191505060405180910390fd5b6000620004d462000594565b9050620004fb81600087620004e98862000599565b620004f48862000599565b87620005e0565b60008481526001602090815260408083206001600160a01b03808a1680865291845282852080548901905582518981529384018890528251919493908616926000805160206200393e83398151915292918290030190a46200056381600087878787620005e8565b5050505050565b620002933083600084604051806020016040528060008152506200084860201b62000ec01760201c565b335b90565b604080516001808252818301909252606091829190602080830190803683370190505090508281600081518110620005cd57fe5b602090810291909101015290505b919050565b505050505050565b62000607846001600160a01b031662000a2260201b620010a71760201c565b15620005e057836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015620006995781810151838201526020016200067f565b50505050905090810190601f168015620006c75780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015620006eb57600080fd5b505af19250505080156200071257506040513d60208110156200070d57600080fd5b505160015b620007ee576200072162000e11565b806200072e5750620007b6565b8060405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200077a57818101518382015260200162000760565b50505050905090810190601f168015620007a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405162461bcd60e51b8152600401808060200182810382526034815260200180620038e26034913960400191505060405180910390fd5b6001600160e01b0319811663f23a6e6160e01b146200083f5760405162461bcd60e51b8152600401808060200182810382526028815260200180620039166028913960400191505060405180910390fd5b50505050505050565b6001600160a01b0384166200088f5760405162461bcd60e51b8152600401808060200182810382526025815260200180620039876025913960400191505060405180910390fd5b6200089962000594565b6001600160a01b0316856001600160a01b03161480620008d05750620008be62000594565b6004546001600160a01b039081169116145b80620008ec5750620008ec85620008e662000594565b62000a28565b620009295760405162461bcd60e51b81526004018080602001828103825260298152602001806200395e6029913960400191505060405180910390fd5b60006200093562000594565b905062000949818787620004e98862000599565b60008481526001602090815260408083206001600160a01b038a16845290915290205483811015620009ad5760405162461bcd60e51b815260040180806020018281038252602a815260200180620039ac602a913960400191505060405180910390fd5b60008581526001602090815260408083206001600160a01b038b811680865291845282852089870390558a81168086529483902080548a01905582518a815293840189905282519193908716926000805160206200393e83398151915292918290030190a46200083f828888888888620005e8565b3b151590565b600062000a41838362000a4860201b620010ad1760201c565b5092915050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b610260806200368283390190565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262000abc576000855562000b07565b82601f1062000ad757805160ff191683800117855562000b07565b8280016001018555821562000b07579182015b8281111562000b0757825182559160200191906001019062000aea565b5062000b1592915062000b19565b5090565b5b8082111562000b15576000815560010162000b1a565b80516001600160a01b0381168114620005db57600080fd5b805160048110620005db57600080fd5b600082601f83011262000b69578081fd5b81516001600160401b038082111562000b7e57fe5b6040516020601f8401601f191682018101838111838210171562000b9e57fe5b8060405250819450838252868185880101111562000bbb57600080fd5b600092505b8383101562000bdf578583018101518284018201529182019162000bc0565b8383111562000bf15760008185840101525b5050505092915050565b805160ff81168114620005db57600080fd5b60006020828403121562000c1f578081fd5b62000c2a8262000b30565b9392505050565b6000806000806000806000806000806101408b8d03121562000c51578586fd5b8a516001600160401b038082111562000c68578788fd5b62000c768e838f0162000b58565b9b5060208d01519a5060408d0151995060608d015191508082111562000c9a578788fd5b5062000ca98d828e0162000b58565b97505062000cba60808c0162000b48565b955062000cca60a08c0162000bfb565b945062000cda60c08c0162000bfb565b935062000cea60e08c0162000bfb565b925062000cfb6101008c0162000b30565b915062000d0c6101208c0162000b30565b90509295989b9194979a5092959850565b60006020828403121562000d2f578081fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b608081016004861062000d6657fe5b94815260ff9384166020820152918316604083015290911660609091015290565b60208082526024908201527f54686572652061726520616c7265616479203234206d656d626572732c20736f6040820152637272792160e01b606082015260800190565b60208082526018908201527f596f75206861766520616c7265616479206a6f696e6564210000000000000000604082015260600190565b90815260200190565b60e01c90565b600060443d101562000e235762000596565b600481823e6308c379a062000e39825162000e0b565b1462000e455762000596565b6040513d600319016004823e80513d6001600160401b03808311602484018310171562000e76575050505062000596565b8284019250825191508082111562000e92575050505062000596565b503d8301602082840101111562000eac5750505062000596565b601f01601f1916810160200160405291505090565b6127b18062000ed16000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80637c8da89d116100de578063bedf77a611610097578063e28cf15911610071578063e28cf15914610367578063e985e9c51461036f578063f23a6e6114610382578063f242432a146103955761018d565b8063bedf77a61461032e578063cfeaeb8b14610341578063d50c7377146103545761018d565b80637c8da89d146102ab5780638f853115146102c0578063a22cb465146102d3578063abb88bcc146102e6578063b887b087146102fb578063bc197c811461030e5761018d565b8063135b41651161014b578063321c48f211610125578063321c48f21461024e5780634e1273f4146102635780635aa97b061461028357806379e66b46146102985761018d565b8063135b4165146102205780631a98ce75146102285780632eb2c2d61461023b5761018d565b8062fdd58e14610192578063019c08f5146101bb57806301ffc9a7146101c357806306135265146101e357806306fdde03146101f85780630e89341c1461020d575b600080fd5b6101a56101a0366004612008565b6103a8565b6040516101b291906124e2565b60405180910390f35b6101a56103e2565b6101d66101d1366004612160565b6103e8565b6040516101b29190612357565b6101f66101f1366004612033565b610430565b005b610200610661565b6040516101b2919061239a565b61020061021b3660046121c9565b6106ef565b6101a5610787565b6101a5610236366004611d1e565b61078d565b6101f6610249366004611d95565b61079f565b6102566108ad565b6040516101b29190612377565b6102766102713660046120f8565b610930565b6040516101b29190612313565b61028b610a04565b6040516101b291906122de565b6101f66102a63660046121f9565b610bc5565b6102b3610d53565b6040516101b2919061238b565b6101a56102ce3660046121c9565b610d5d565b6101f66102e1366004611fd7565b610d7e565b6102ee610d8c565b6040516101b29190612235565b6101f6610309366004612008565b610d9b565b61032161031c366004611e4f565b610db8565b6040516101b29190612362565b6101f661033c366004611d1e565b610dc9565b6101f661034f366004612008565b610e03565b6101d66103623660046121c9565b610e20565b610276610e35565b6101d661037d366004611d5d565b610e3a565b610321610390366004611f71565b610e46565b6101f66103a3366004611ef8565b610e57565b600081156103d15760405162461bcd60e51b81526004016103c890612422565b60405180910390fd5b6103db83836110dd565b5092915050565b60095481565b60006001600160e01b03198216636cdb3d1360e11b148061041957506001600160e01b031982166303a24d0760e21b145b8061042857506104288261114c565b90505b919050565b600a54601861ffff90911611156104595760405162461bcd60e51b81526004016103c890612467565b610461611b25565b506040805160a0810182526001600160401b03808c166060830190815260ff808d166080850152908352835180850185528b831681528a82166020828101919091528085019190915284518086018652928a16835290881690820152818301526006549151630a73b69d60e01b815290916001600160a01b031690630a73b69d906104f6908e90859089908990600401612249565b600060405180830381600087803b15801561051057600080fd5b505af1158015610524573d6000803e3d6000fd5b50506006546040516342ca962960e01b8152600093506001600160a01b0390911691506342ca96299061055b908f90600401612235565b60206040518083038186803b15801561057357600080fd5b505afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906121e1565b6000818152600c60205260408082208054600160ff199091168117909155600d8054808301825593527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909201839055600a805461ffff19811661ffff9182169094011692909217909155519091507fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e9061064b908e90849087906122bd565b60405180910390a1505050505050505050505050565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106e75780601f106106bc576101008083540402835291602001916106e7565b820191906000526020600020905b8154815290600101906020018083116106ca57829003601f168201915b505050505081565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561077b5780601f106107505761010080835404028352916020019161077b565b820191906000526020600020905b81548152906001019060200180831161075e57829003601f168201915b50505050509050919050565b600b5481565b600061079982826110dd565b50919050565b6107e3868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250600192506107de915050565b61118c565b156108005760405162461bcd60e51b81526004016103c8906123ed565b6108a3888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152506111d092505050565b5050505050505050565b60055460408051636f2ddd9360e01b815290516000926001600160a01b031691636f2ddd93916004808301926020929190829003018186803b1580156108f257600080fd5b505afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190612188565b90505b90565b6060610971838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250600192506107de915050565b1561098e5760405162461bcd60e51b81526004016103c8906123ed565b6109fb858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506114bf92505050565b50949350505050565b610a0c611b57565b600554604051633a5b120360e11b81526000916001600160a01b0316906374b6240690610a3e9060019060040161238b565b60206040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e91906121a7565b600554604051633a5b120360e11b81529192506000916001600160a01b03909116906374b6240690610ac59060029060040161238b565b60206040518083038186803b158015610add57600080fd5b505afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1591906121a7565b600554604051633a5b120360e11b81529192506000916001600160a01b03909116906374b6240690610b4c9060039060040161238b565b60206040518083038186803b158015610b6457600080fd5b505afa158015610b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9c91906121a7565b6040805160608101825261ffff9586168152938516602085015293169282019290925291505090565b600a54601861ffff9091161115610bee5760405162461bcd60e51b81526004016103c890612467565b6000828152600c602052604090205460ff1615610c1d5760405162461bcd60e51b81526004016103c8906124ab565b6006546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610c4e9086906004016124e2565b60206040518083038186803b158015610c6657600080fd5b505afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e9190611d41565b6000848152600c602052604081208054600160ff199091168117909155600d8054808301825592527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101859055600a805461ffff19811661ffff918216909301169190911790559050610d138183610d9b565b7fe17e0e2cd88e2144dd54f3d823c30d4569092bcac1aabaec1129883e9cc12d2e818484604051610d46939291906122bd565b60405180910390a1505050565b600a5461ffff1681565b600d8181548110610d6d57600080fd5b600091825260209091200154905081565b610d8882826115aa565b5050565b6005546001600160a01b031690565b610d88308360008460405180602001604052806000815250610ec0565b63bc197c8160e01b95945050505050565b7fbea911b50ccdd2233b28faa49766c3cbd0631608f32e5a724d7b83b32b681ad081604051610df89190612235565b60405180910390a150565b610d88823060008460405180602001604052806000815250610ec0565b600c6020526000908152604090205460ff1681565b606090565b60006103db83836110ad565b63f23a6e6160e01b95945050505050565b8315610e755760405162461bcd60e51b81526004016103c8906123ed565b610eb88686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ec092505050565b505050505050565b6001600160a01b038416610f055760405162461bcd60e51b81526004018080602001828103825260258152602001806126816025913960400191505060405180910390fd5b610f0d611699565b6001600160a01b0316856001600160a01b03161480610f415750610f2f611699565b6004546001600160a01b039081169116145b80610f535750610f538561037d611699565b610f8e5760405162461bcd60e51b81526004018080602001828103825260298152602001806126586029913960400191505060405180910390fd5b6000610f98611699565b9050610fb8818787610fa98861169d565b610fb28861169d565b87610eb8565b60008481526001602090815260408083206001600160a01b038a1684529091529020548381101561101a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806126d8602a913960400191505060405180910390fd5b60008581526001602090815260408083206001600160a01b038b811680865291845282852089870390558a81168086529483902080548a01905582518a815293840189905282519193908716927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292918290030190a461109e8288888888886116e1565b50505050505050565b3b151590565b6001600160a01b0380831660009081526002602090815260408083209385168352929052205460ff165b92915050565b60006001600160a01b0383166111245760405162461bcd60e51b815260040180806020018281038252602b81526020018061262d602b913960400191505060405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061117d57506001600160e01b031982166303a24d0760e21b145b80610428575061042882611919565b6000805b83518110156111c657828482815181106111a657fe5b602002602001015114156111be5760019150506110d7565b600101611190565b5060009392505050565b81518351146112105760405162461bcd60e51b81526004018080602001828103825260288152602001806127546028913960400191505060405180910390fd5b6001600160a01b0384166112555760405162461bcd60e51b81526004018080602001828103825260258152602001806126816025913960400191505060405180910390fd5b61125d611699565b6001600160a01b0316856001600160a01b03161480611291575061127f611699565b6004546001600160a01b039081169116145b806112a357506112a38561037d611699565b6112de5760405162461bcd60e51b81526004018080602001828103825260328152602001806126a66032913960400191505060405180910390fd5b60006112e8611699565b90506112f8818787878787610eb8565b60005b84518110156113d757600085828151811061131257fe5b60200260200101519050600085838151811061132a57fe5b60209081029190910181015160008481526001835260408082206001600160a01b038e16835290935291909120549091508181101561139a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806126d8602a913960400191505060405180910390fd5b60009283526001602081815260408086206001600160a01b038e811688529252808620938590039093558a168452922080549091019055016112fb565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561145d578181015183820152602001611445565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561149c578181015183820152602001611484565b5050505090500194505050505060405180910390a4610eb8818787878787611938565b606081518351146115015760405162461bcd60e51b815260040180806020018281038252602981526020018061272b6029913960400191505060405180910390fd5b606083516001600160401b038111801561151a57600080fd5b50604051908082528060200260200182016040528015611544578160200160208202803683370190505b50905060005b84518110156115a25761158385828151811061156257fe5b602002602001015185838151811061157657fe5b60200260200101516103a8565b82828151811061158f57fe5b602090810291909101015260010161154a565b509392505050565b816001600160a01b03166115bc611699565b6001600160a01b031614156116025760405162461bcd60e51b81526004018080602001828103825260298152602001806127026029913960400191505060405180910390fd5b806002600061160f611699565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611653611699565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b3390565b6040805160018082528183019092526060918291906020808301908036833701905050905082816000815181106116d057fe5b602090810291909101015292915050565b6116f3846001600160a01b03166110a7565b15610eb857836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561178257818101518382015260200161176a565b50505050905090810190601f1680156117af5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156117d257600080fd5b505af19250505080156117f757506040513d60208110156117f257600080fd5b505160015b6118ca57611803612514565b8061180e5750611893565b8060405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611858578181015183820152602001611840565b50505050905090810190601f1680156118855780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405162461bcd60e51b81526004018080602001828103825260348152602001806125d16034913960400191505060405180910390fd5b6001600160e01b0319811663f23a6e6160e01b1461109e5760405162461bcd60e51b81526004018080602001828103825260288152602001806126056028913960400191505060405180910390fd5b6001600160e01b03191660009081526020819052604090205460ff1690565b61194a846001600160a01b03166110a7565b15610eb857836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156119d85781810151838201526020016119c0565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015611a175781810151838201526020016119ff565b50505050905001848103825285818151815260200191508051906020019080838360005b83811015611a53578181015183820152602001611a3b565b50505050905090810190601f168015611a805780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015611aa557600080fd5b505af1925050508015611aca57506040513d6020811015611ac557600080fd5b505160015b611ad657611803612514565b6001600160e01b0319811663bc197c8160e01b1461109e5760405162461bcd60e51b81526004018080602001828103825260288152602001806126056028913960400191505060405180910390fd5b6040518060600160405280611b38611b75565b8152602001611b45611b75565b8152602001611b52611b75565b905290565b60405180606001604052806003906020820280368337509192915050565b604080518082019091526000808252602082015290565b60008083601f840112611b9d578182fd5b5081356001600160401b03811115611bb3578182fd5b6020830191508360208083028501011115611bcd57600080fd5b9250929050565b600082601f830112611be4578081fd5b81356001600160401b03811115611bf757fe5b6020808202611c078282016124eb565b83815293508184018583018287018401881015611c2357600080fd5b600092505b84831015611c46578035825260019290920191908301908301611c28565b505050505092915050565b60008083601f840112611c62578182fd5b5081356001600160401b03811115611c78578182fd5b602083019150836020828501011115611bcd57600080fd5b600082601f830112611ca0578081fd5b81356001600160401b03811115611cb357fe5b611cc6601f8201601f19166020016124eb565b9150808252836020828501011115611cdd57600080fd5b8060208401602084013760009082016020015292915050565b80356001600160401b038116811461042b57600080fd5b803560ff8116811461042b57600080fd5b600060208284031215611d2f578081fd5b8135611d3a816125b8565b9392505050565b600060208284031215611d52578081fd5b8151611d3a816125b8565b60008060408385031215611d6f578081fd5b8235611d7a816125b8565b91506020830135611d8a816125b8565b809150509250929050565b60008060008060008060008060a0898b031215611db0578384fd5b8835611dbb816125b8565b97506020890135611dcb816125b8565b965060408901356001600160401b0380821115611de6578586fd5b611df28c838d01611b8c565b909850965060608b0135915080821115611e0a578586fd5b611e168c838d01611b8c565b909650945060808b0135915080821115611e2e578384fd5b50611e3b8b828c01611c51565b999c989b5096995094979396929594505050565b600080600080600060a08688031215611e66578081fd5b8535611e71816125b8565b94506020860135611e81816125b8565b935060408601356001600160401b0380821115611e9c578283fd5b611ea889838a01611bd4565b94506060880135915080821115611ebd578283fd5b611ec989838a01611bd4565b93506080880135915080821115611ede578283fd5b50611eeb88828901611c90565b9150509295509295909350565b60008060008060008060a08789031215611f10578182fd5b8635611f1b816125b8565b95506020870135611f2b816125b8565b9450604087013593506060870135925060808701356001600160401b03811115611f53578283fd5b611f5f89828a01611c51565b979a9699509497509295939492505050565b600080600080600060a08688031215611f88578081fd5b8535611f93816125b8565b94506020860135611fa3816125b8565b9350604086013592506060860135915060808601356001600160401b03811115611fcb578182fd5b611eeb88828901611c90565b60008060408385031215611fe9578182fd5b8235611ff4816125b8565b915060208301358015158114611d8a578182fd5b6000806040838503121561201a578182fd5b8235612025816125b8565b946020939093013593505050565b6000806000806000806000806000806101208b8d031215612052578384fd5b8a3561205d816125b8565b995061206b60208c01611cf6565b985061207960408c01611d0d565b975061208760608c01611cf6565b965061209560808c01611d0d565b95506120a360a08c01611cf6565b94506120b160c08c01611d0d565b935060e08b01356001600160401b038111156120cb578283fd5b6120d78d828e01611c51565b915080945050809250506101008b013590509295989b9194979a5092959850565b6000806000806040858703121561210d578182fd5b84356001600160401b0380821115612123578384fd5b61212f88838901611b8c565b90965094506020870135915080821115612147578384fd5b5061215487828801611b8c565b95989497509550505050565b600060208284031215612171578081fd5b81356001600160e01b031981168114611d3a578182fd5b600060208284031215612199578081fd5b815160048110611d3a578182fd5b6000602082840312156121b8578081fd5b815161ffff81168114611d3a578182fd5b6000602082840312156121da578081fd5b5035919050565b6000602082840312156121f2578081fd5b5051919050565b6000806040838503121561220b578182fd5b50508035926020909101359150565b80516001600160401b0316825260209081015160ff16910152565b6001600160a01b0391909116815260200190565b600061010060018060a01b038716835261226760208401875161221a565b6020860151612279606085018261221a565b50604086015161228c60a085018261221a565b508060e0840152838184015250610120838582850137828401810191909152601f909201601f191601019392505050565b6001600160a01b039390931683526020830191909152604082015260600190565b60608101818360005b600381101561230a57815161ffff168352602092830192909101906001016122e7565b50505092915050565b6020808252825182820181905260009190848201906040850190845b8181101561234b5783518352928401929184019160010161232f565b50909695505050505050565b901515815260200190565b6001600160e01b031991909116815260200190565b602081016004831061238557fe5b91905290565b61ffff91909116815260200190565b6000602080835283518082850152825b818110156123c6578581018301518582016040015282016123aa565b818111156123d75783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f436f6d6d756e697479204e46542063616e277420626520747261736665726564604082015260600190565b60208082526025908201527f436f6d6d756e697479204e465420646f65736e2774206861766520612062616c60408201526430b731b29760d91b606082015260800190565b60208082526024908201527f54686572652061726520616c7265616479203234206d656d626572732c20736f6040820152637272792160e01b606082015260800190565b60208082526018908201527f596f75206861766520616c7265616479206a6f696e6564210000000000000000604082015260600190565b90815260200190565b6040518181016001600160401b038111828210171561250657fe5b604052919050565b60e01c90565b600060443d10156125245761092d565b600481823e6308c379a0612538825161250e565b146125425761092d565b6040513d600319016004823e80513d6001600160401b038160248401118184111715612571575050505061092d565b8284019250825191508082111561258b575050505061092d565b503d830160208284010111156125a35750505061092d565b601f01601f1916810160200160405291505090565b6001600160a01b03811681146125cd57600080fd5b5056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368a26469706673582212202ff5e79103b1a04f6a7762b5910612a0c0cf6717a3e11498689f0fb51c0368e964736f6c63430007040033608060405234801561001057600080fd5b506040516102603803806102608339818101604052608081101561003357600080fd5b5080516020820151604083015160609093015160008054336001600160a01b03199182168117909255600180549091169091178082559394929385919060ff60a01b1916600160a01b83600381111561008857fe5b021790555060026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0805461ffff1990811660ff958616179091557f679795a0195a1b76cdebb7c51d74e058aee92919b8c3389af86ef24535e8a28c805482169385169390931790925560036000527f88601476d11616a71c5be67555bd1dff4b1cbf21533d2669b768b61518cfe1c38054909216921691909117905550610129806101376000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80636f2ddd9314604157806374b6240614606757806386e476dd14609c575b600080fd5b604760be565b60405180826003811115605657fe5b815260200191505060405180910390f35b608560048036036020811015607b57600080fd5b503561ffff1660ce565b6040805161ffff9092168252519081900360200190f35b60a260e4565b604080516001600160a01b039092168252519081900360200190f35b600154600160a01b900460ff1681565b60026020526000908152604090205461ffff1681565b6000546001600160a01b03168156fea2646970667358221220f510d9fda6093a0df8ef25c3c55682d2e278e639c87a5f689e702228b9218d8364736f6c63430007040033455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572455243313135353a206d696e7420746f20746865207a65726f2061646472657373a2646970667358221220825c84b58bb7e7df6f562e893648c8e5dd94dab911cda20fcbe1860256fd7e2c64736f6c63430007040033","deployedBytecode":"","abi":[{"inputs":[{"internalType":"address","name":"_skillWalletAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_newCommunityAddress","type":"address"}],"name":"CommunityCreated","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"communityAddresses","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_url","type":"string"},{"internalType":"uint256","name":"_ownerId","type":"uint256"},{"internalType":"uint256","name":"_ownerCredits","type":"uint256"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"enum Types.Template","name":"_template","type":"uint8"},{"internalType":"uint8","name":"_positionalValue1","type":"uint8"},{"internalType":"uint8","name":"_positionalValue2","type":"uint8"},{"internalType":"uint8","name":"_positionalValue3","type":"uint8"}],"name":"createCommunity","outputs":[{"internalType":"address","name":"_communityAddress","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCommunities","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isCommunity","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"community","type":"address"},{"internalType":"uint256","name":"skillWalletTokenId","type":"uint256"},{"internalType":"uint256","name":"credits","type":"uint256"}],"name":"joinExistingSW","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"community","type":"address"},{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint64","name":"displayStringId1","type":"uint64"},{"internalType":"uint8","name":"level1","type":"uint8"},{"internalType":"uint64","name":"displayStringId2","type":"uint64"},{"internalType":"uint8","name":"level2","type":"uint8"},{"internalType":"uint64","name":"displayStringId3","type":"uint64"},{"internalType":"uint8","name":"level3","type":"uint8"},{"internalType":"string","name":"uri","type":"string"},{"internalType":"uint256","name":"credits","type":"uint256"}],"name":"joinNewMember","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"numOfCommunities","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"skillWalletAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}